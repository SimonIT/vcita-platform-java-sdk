/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vcita.platform.client.model.Others;
import com.vcita.platform.client.model.Policies;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * FormData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FormData {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, String> fields = null;

  public static final String SERIALIZED_NAME_OTHERS = "others";
  @SerializedName(SERIALIZED_NAME_OTHERS)
  private Others others;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private Policies policies;

  public static final String SERIALIZED_NAME_SERVICE_FIELDS = "service_fields";
  @SerializedName(SERIALIZED_NAME_SERVICE_FIELDS)
  private Object serviceFields;

  public FormData() { 
  }

  public FormData fields(Map<String, String> fields) {
    
    this.fields = fields;
    return this;
  }

  public FormData putFieldsItem(String key, String fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getFields() {
    return fields;
  }


  public void setFields(Map<String, String> fields) {
    this.fields = fields;
  }


  public FormData others(Others others) {
    
    this.others = others;
    return this;
  }

   /**
   * Get others
   * @return others
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Others getOthers() {
    return others;
  }


  public void setOthers(Others others) {
    this.others = others;
  }


  public FormData policies(Policies policies) {
    
    this.policies = policies;
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Policies getPolicies() {
    return policies;
  }


  public void setPolicies(Policies policies) {
    this.policies = policies;
  }


  public FormData serviceFields(Object serviceFields) {
    
    this.serviceFields = serviceFields;
    return this;
  }

   /**
   * Get serviceFields
   * @return serviceFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getServiceFields() {
    return serviceFields;
  }


  public void setServiceFields(Object serviceFields) {
    this.serviceFields = serviceFields;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormData formData = (FormData) o;
    return Objects.equals(this.fields, formData.fields) &&
        Objects.equals(this.others, formData.others) &&
        Objects.equals(this.policies, formData.policies) &&
        Objects.equals(this.serviceFields, formData.serviceFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, others, policies, serviceFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormData {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    others: ").append(toIndentedString(others)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    serviceFields: ").append(toIndentedString(serviceFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("others");
    openapiFields.add("policies");
    openapiFields.add("service_fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FormData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FormData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormData is not found in the empty JSON string", FormData.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FormData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `others`
      if (jsonObj.getAsJsonObject("others") != null) {
        Others.validateJsonObject(jsonObj.getAsJsonObject("others"));
      }
      // validate the optional field `policies`
      if (jsonObj.getAsJsonObject("policies") != null) {
        Policies.validateJsonObject(jsonObj.getAsJsonObject("policies"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormData.class));

       return (TypeAdapter<T>) new TypeAdapter<FormData>() {
           @Override
           public void write(JsonWriter out, FormData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FormData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FormData
  * @throws IOException if the JSON string is invalid with respect to FormData
  */
  public static FormData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormData.class);
  }

 /**
  * Convert an instance of FormData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

