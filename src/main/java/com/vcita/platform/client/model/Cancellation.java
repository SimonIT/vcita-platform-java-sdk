/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * Cancellation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Cancellation {
  public static final String SERIALIZED_NAME_CAN_CANCEL = "can_cancel";
  @SerializedName(SERIALIZED_NAME_CAN_CANCEL)
  private Boolean canCancel;

  public static final String SERIALIZED_NAME_CAN_CANCEL_NOW = "can_cancel_now";
  @SerializedName(SERIALIZED_NAME_CAN_CANCEL_NOW)
  private Boolean canCancelNow;

  public static final String SERIALIZED_NAME_TIME_LIMIT = "time_limit";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT)
  private Integer timeLimit;

  public Cancellation() { 
  }

  public Cancellation canCancel(Boolean canCancel) {
    
    this.canCancel = canCancel;
    return this;
  }

   /**
   * Get canCancel
   * @return canCancel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanCancel() {
    return canCancel;
  }


  public void setCanCancel(Boolean canCancel) {
    this.canCancel = canCancel;
  }


  public Cancellation canCancelNow(Boolean canCancelNow) {
    
    this.canCancelNow = canCancelNow;
    return this;
  }

   /**
   * Get canCancelNow
   * @return canCancelNow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanCancelNow() {
    return canCancelNow;
  }


  public void setCanCancelNow(Boolean canCancelNow) {
    this.canCancelNow = canCancelNow;
  }


  public Cancellation timeLimit(Integer timeLimit) {
    
    this.timeLimit = timeLimit;
    return this;
  }

   /**
   * Get timeLimit
   * @return timeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTimeLimit() {
    return timeLimit;
  }


  public void setTimeLimit(Integer timeLimit) {
    this.timeLimit = timeLimit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cancellation cancellation = (Cancellation) o;
    return Objects.equals(this.canCancel, cancellation.canCancel) &&
        Objects.equals(this.canCancelNow, cancellation.canCancelNow) &&
        Objects.equals(this.timeLimit, cancellation.timeLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canCancel, canCancelNow, timeLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cancellation {\n");
    sb.append("    canCancel: ").append(toIndentedString(canCancel)).append("\n");
    sb.append("    canCancelNow: ").append(toIndentedString(canCancelNow)).append("\n");
    sb.append("    timeLimit: ").append(toIndentedString(timeLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_cancel");
    openapiFields.add("can_cancel_now");
    openapiFields.add("time_limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Cancellation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Cancellation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cancellation is not found in the empty JSON string", Cancellation.openapiRequiredFields.toString()));
        }
      }
      Set<java.util.Map.Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (java.util.Map.Entry<String, JsonElement> entry : entries) {
        if (!Cancellation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cancellation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cancellation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cancellation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cancellation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cancellation.class));

       return (TypeAdapter<T>) new TypeAdapter<Cancellation>() {
           @Override
           public void write(JsonWriter out, Cancellation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cancellation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cancellation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cancellation
  * @throws IOException if the JSON string is invalid with respect to Cancellation
  */
  public static Cancellation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cancellation.class);
  }

 /**
  * Convert an instance of Cancellation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

