/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * BusinessesBusinessIdBusinessMetaPlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BusinessesBusinessIdBusinessMetaPlan {
  public static final String SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_PARAMS = "external_subscription_params";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_PARAMS)
  private String externalSubscriptionParams;

  public static final String SERIALIZED_NAME_PLAN_NAME = "plan_name";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_STAFF_SLOTS = "staff_slots";
  @SerializedName(SERIALIZED_NAME_STAFF_SLOTS)
  private String staffSlots;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public BusinessesBusinessIdBusinessMetaPlan() { 
  }

  public BusinessesBusinessIdBusinessMetaPlan externalSubscriptionParams(String externalSubscriptionParams) {
    
    this.externalSubscriptionParams = externalSubscriptionParams;
    return this;
  }

   /**
   * External Subscription Parameters (should not be used with recurly type)
   * @return externalSubscriptionParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External Subscription Parameters (should not be used with recurly type)")

  public String getExternalSubscriptionParams() {
    return externalSubscriptionParams;
  }


  public void setExternalSubscriptionParams(String externalSubscriptionParams) {
    this.externalSubscriptionParams = externalSubscriptionParams;
  }


  public BusinessesBusinessIdBusinessMetaPlan planName(String planName) {
    
    this.planName = planName;
    return this;
  }

   /**
   * Package name to subscribe (for manual type) / recurly plan code (for recurly type)
   * @return planName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Package name to subscribe (for manual type) / recurly plan code (for recurly type)")

  public String getPlanName() {
    return planName;
  }


  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public BusinessesBusinessIdBusinessMetaPlan staffSlots(String staffSlots) {
    
    this.staffSlots = staffSlots;
    return this;
  }

   /**
   * Staff sub accounts limit (should not be used with recurly type)
   * @return staffSlots
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Staff sub accounts limit (should not be used with recurly type)")

  public String getStaffSlots() {
    return staffSlots;
  }


  public void setStaffSlots(String staffSlots) {
    this.staffSlots = staffSlots;
  }


  public BusinessesBusinessIdBusinessMetaPlan type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * recurly/manual
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "recurly/manual")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessesBusinessIdBusinessMetaPlan businessesBusinessIdBusinessMetaPlan = (BusinessesBusinessIdBusinessMetaPlan) o;
    return Objects.equals(this.externalSubscriptionParams, businessesBusinessIdBusinessMetaPlan.externalSubscriptionParams) &&
        Objects.equals(this.planName, businessesBusinessIdBusinessMetaPlan.planName) &&
        Objects.equals(this.staffSlots, businessesBusinessIdBusinessMetaPlan.staffSlots) &&
        Objects.equals(this.type, businessesBusinessIdBusinessMetaPlan.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalSubscriptionParams, planName, staffSlots, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessesBusinessIdBusinessMetaPlan {\n");
    sb.append("    externalSubscriptionParams: ").append(toIndentedString(externalSubscriptionParams)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    staffSlots: ").append(toIndentedString(staffSlots)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external_subscription_params");
    openapiFields.add("plan_name");
    openapiFields.add("staff_slots");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("plan_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BusinessesBusinessIdBusinessMetaPlan
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BusinessesBusinessIdBusinessMetaPlan.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessesBusinessIdBusinessMetaPlan is not found in the empty JSON string", BusinessesBusinessIdBusinessMetaPlan.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BusinessesBusinessIdBusinessMetaPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessesBusinessIdBusinessMetaPlan` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessesBusinessIdBusinessMetaPlan.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessesBusinessIdBusinessMetaPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessesBusinessIdBusinessMetaPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessesBusinessIdBusinessMetaPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessesBusinessIdBusinessMetaPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessesBusinessIdBusinessMetaPlan>() {
           @Override
           public void write(JsonWriter out, BusinessesBusinessIdBusinessMetaPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessesBusinessIdBusinessMetaPlan read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessesBusinessIdBusinessMetaPlan given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessesBusinessIdBusinessMetaPlan
  * @throws IOException if the JSON string is invalid with respect to BusinessesBusinessIdBusinessMetaPlan
  */
  public static BusinessesBusinessIdBusinessMetaPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessesBusinessIdBusinessMetaPlan.class);
  }

 /**
  * Convert an instance of BusinessesBusinessIdBusinessMetaPlan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

