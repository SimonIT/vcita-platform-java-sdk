/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.vcita.platform.client.model.PaymentCheckoutCard;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * InlineObject18
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineObject18 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Boolean amount;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private PaymentCheckoutCard card;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_PS_ID = "ps_id";
  @SerializedName(SERIALIZED_NAME_PS_ID)
  private String psId;

  public static final String SERIALIZED_NAME_SYNC_FLOW = "sync_flow";
  @SerializedName(SERIALIZED_NAME_SYNC_FLOW)
  private Boolean syncFlow;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL_KEY = "url_key";
  @SerializedName(SERIALIZED_NAME_URL_KEY)
  private String urlKey;

  public InlineObject18() { 
  }

  public InlineObject18 amount(Boolean amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The charged amount  (You should send this only if you are in sync_flow)
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The charged amount  (You should send this only if you are in sync_flow)")

  public Boolean getAmount() {
    return amount;
  }


  public void setAmount(Boolean amount) {
    this.amount = amount;
  }


  public InlineObject18 card(PaymentCheckoutCard card) {
    
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentCheckoutCard getCard() {
    return card;
  }


  public void setCard(PaymentCheckoutCard card) {
    this.card = card;
  }


  public InlineObject18 created(String created) {
    
    this.created = created;
    return this;
  }

   /**
   * the date of the payment
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the date of the payment")

  public String getCreated() {
    return created;
  }


  public void setCreated(String created) {
    this.created = created;
  }


  public InlineObject18 customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * The customer unique id (You should send this only if client want to save the card)
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The customer unique id (You should send this only if client want to save the card)")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public InlineObject18 psId(String psId) {
    
    this.psId = psId;
    return this;
  }

   /**
   * The payment status uid (You should send this only if you are in sync_flow)
   * @return psId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment status uid (You should send this only if you are in sync_flow)")

  public String getPsId() {
    return psId;
  }


  public void setPsId(String psId) {
    this.psId = psId;
  }


  public InlineObject18 syncFlow(Boolean syncFlow) {
    
    this.syncFlow = syncFlow;
    return this;
  }

   /**
   * You should send true in case it is a post checkout flow 
   * @return syncFlow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "You should send true in case it is a post checkout flow ")

  public Boolean getSyncFlow() {
    return syncFlow;
  }


  public void setSyncFlow(Boolean syncFlow) {
    this.syncFlow = syncFlow;
  }


  public InlineObject18 transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * The external payment gateway transaction id
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The external payment gateway transaction id")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public InlineObject18 type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * checkout.session.completed
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "checkout.session.completed")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public InlineObject18 urlKey(String urlKey) {
    
    this.urlKey = urlKey;
    return this;
  }

   /**
   * The url_key
   * @return urlKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The url_key")

  public String getUrlKey() {
    return urlKey;
  }


  public void setUrlKey(String urlKey) {
    this.urlKey = urlKey;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject18 inlineObject18 = (InlineObject18) o;
    return Objects.equals(this.amount, inlineObject18.amount) &&
        Objects.equals(this.card, inlineObject18.card) &&
        Objects.equals(this.created, inlineObject18.created) &&
        Objects.equals(this.customerId, inlineObject18.customerId) &&
        Objects.equals(this.psId, inlineObject18.psId) &&
        Objects.equals(this.syncFlow, inlineObject18.syncFlow) &&
        Objects.equals(this.transactionId, inlineObject18.transactionId) &&
        Objects.equals(this.type, inlineObject18.type) &&
        Objects.equals(this.urlKey, inlineObject18.urlKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, card, created, customerId, psId, syncFlow, transactionId, type, urlKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject18 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    psId: ").append(toIndentedString(psId)).append("\n");
    sb.append("    syncFlow: ").append(toIndentedString(syncFlow)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    urlKey: ").append(toIndentedString(urlKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("card");
    openapiFields.add("created");
    openapiFields.add("customer_id");
    openapiFields.add("ps_id");
    openapiFields.add("sync_flow");
    openapiFields.add("transaction_id");
    openapiFields.add("type");
    openapiFields.add("url_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InlineObject18
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InlineObject18.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineObject18 is not found in the empty JSON string", InlineObject18.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InlineObject18.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineObject18` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `card`
      if (jsonObj.getAsJsonObject("card") != null) {
        PaymentCheckoutCard.validateJsonObject(jsonObj.getAsJsonObject("card"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineObject18.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineObject18' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineObject18> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineObject18.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineObject18>() {
           @Override
           public void write(JsonWriter out, InlineObject18 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineObject18 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InlineObject18 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InlineObject18
  * @throws IOException if the JSON string is invalid with respect to InlineObject18
  */
  public static InlineObject18 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineObject18.class);
  }

 /**
  * Convert an instance of InlineObject18 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

