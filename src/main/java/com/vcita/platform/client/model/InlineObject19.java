/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * InlineObject19
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineObject19 {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversation_id";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private String conversationId;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "package_id";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private String packageId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_VALID_FROM = "valid_from";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private String validFrom;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "valid_until";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  private String validUntil;

  public InlineObject19() { 
  }

  public InlineObject19 clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client ID
   * @return clientId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Client ID")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public InlineObject19 conversationId(String conversationId) {
    
    this.conversationId = conversationId;
    return this;
  }

   /**
   * Conversation ID
   * @return conversationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversation ID")

  public String getConversationId() {
    return conversationId;
  }


  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
  }


  public InlineObject19 packageId(String packageId) {
    
    this.packageId = packageId;
    return this;
  }

   /**
   * Package ID
   * @return packageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Package ID")

  public String getPackageId() {
    return packageId;
  }


  public void setPackageId(String packageId) {
    this.packageId = packageId;
  }


  public InlineObject19 price(BigDecimal price) {
    
    this.price = price;
    return this;
  }

   /**
   * Price. Default: package price.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Price. Default: package price.")

  public BigDecimal getPrice() {
    return price;
  }


  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public InlineObject19 validFrom(String validFrom) {
    
    this.validFrom = validFrom;
    return this;
  }

   /**
   * First valid date of the client package (ISO 8601 format)
   * @return validFrom
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "First valid date of the client package (ISO 8601 format)")

  public String getValidFrom() {
    return validFrom;
  }


  public void setValidFrom(String validFrom) {
    this.validFrom = validFrom;
  }


  public InlineObject19 validUntil(String validUntil) {
    
    this.validUntil = validUntil;
    return this;
  }

   /**
   * Last valid date of the client package (ISO 8601 format). Default: will be set according to package expiration.
   * @return validUntil
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last valid date of the client package (ISO 8601 format). Default: will be set according to package expiration.")

  public String getValidUntil() {
    return validUntil;
  }


  public void setValidUntil(String validUntil) {
    this.validUntil = validUntil;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject19 inlineObject19 = (InlineObject19) o;
    return Objects.equals(this.clientId, inlineObject19.clientId) &&
        Objects.equals(this.conversationId, inlineObject19.conversationId) &&
        Objects.equals(this.packageId, inlineObject19.packageId) &&
        Objects.equals(this.price, inlineObject19.price) &&
        Objects.equals(this.validFrom, inlineObject19.validFrom) &&
        Objects.equals(this.validUntil, inlineObject19.validUntil);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, conversationId, packageId, price, validFrom, validUntil);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject19 {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("conversation_id");
    openapiFields.add("package_id");
    openapiFields.add("price");
    openapiFields.add("valid_from");
    openapiFields.add("valid_until");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("client_id");
    openapiRequiredFields.add("package_id");
    openapiRequiredFields.add("valid_from");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InlineObject19
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InlineObject19.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineObject19 is not found in the empty JSON string", InlineObject19.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InlineObject19.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineObject19` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineObject19.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineObject19.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineObject19' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineObject19> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineObject19.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineObject19>() {
           @Override
           public void write(JsonWriter out, InlineObject19 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineObject19 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InlineObject19 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InlineObject19
  * @throws IOException if the JSON string is invalid with respect to InlineObject19
  */
  public static InlineObject19 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineObject19.class);
  }

 /**
  * Convert an instance of InlineObject19 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

