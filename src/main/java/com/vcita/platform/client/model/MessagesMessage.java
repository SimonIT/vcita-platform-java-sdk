/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * Message
 */
@ApiModel(description = "Message")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MessagesMessage {
  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private String channels;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONVERSATION_TITLE = "conversation_title";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_TITLE)
  private String conversationTitle;

  public static final String SERIALIZED_NAME_CONVERSATION_UID = "conversation_uid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_UID)
  private String conversationUid;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_STAFF_ID = "staff_id";
  @SerializedName(SERIALIZED_NAME_STAFF_ID)
  private String staffId;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public MessagesMessage() { 
  }

  public MessagesMessage channels(String channels) {
    
    this.channels = channels;
    return this;
  }

   /**
   * Comma separated list of channels. Valid values: sms,email. By default will send to all.
   * @return channels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma separated list of channels. Valid values: sms,email. By default will send to all.")

  public String getChannels() {
    return channels;
  }


  public void setChannels(String channels) {
    this.channels = channels;
  }


  public MessagesMessage clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Client ID
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Client ID")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public MessagesMessage conversationTitle(String conversationTitle) {
    
    this.conversationTitle = conversationTitle;
    return this;
  }

   /**
   * Conversation Title
   * @return conversationTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversation Title")

  public String getConversationTitle() {
    return conversationTitle;
  }


  public void setConversationTitle(String conversationTitle) {
    this.conversationTitle = conversationTitle;
  }


  public MessagesMessage conversationUid(String conversationUid) {
    
    this.conversationUid = conversationUid;
    return this;
  }

   /**
   * Use conversation_uid for adding a message to an existing conversation, do not pass this param for creating new conversation
   * @return conversationUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use conversation_uid for adding a message to an existing conversation, do not pass this param for creating new conversation")

  public String getConversationUid() {
    return conversationUid;
  }


  public void setConversationUid(String conversationUid) {
    this.conversationUid = conversationUid;
  }


  public MessagesMessage direction(String direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Message Direction - client_to_business/business_to_client
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message Direction - client_to_business/business_to_client")

  public String getDirection() {
    return direction;
  }


  public void setDirection(String direction) {
    this.direction = direction;
  }


  public MessagesMessage staffId(String staffId) {
    
    this.staffId = staffId;
    return this;
  }

   /**
   * Staff Id
   * @return staffId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Staff Id")

  public String getStaffId() {
    return staffId;
  }


  public void setStaffId(String staffId) {
    this.staffId = staffId;
  }


  public MessagesMessage text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Message Text
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message Text")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessagesMessage messagesMessage = (MessagesMessage) o;
    return Objects.equals(this.channels, messagesMessage.channels) &&
        Objects.equals(this.clientId, messagesMessage.clientId) &&
        Objects.equals(this.conversationTitle, messagesMessage.conversationTitle) &&
        Objects.equals(this.conversationUid, messagesMessage.conversationUid) &&
        Objects.equals(this.direction, messagesMessage.direction) &&
        Objects.equals(this.staffId, messagesMessage.staffId) &&
        Objects.equals(this.text, messagesMessage.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, clientId, conversationTitle, conversationUid, direction, staffId, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessagesMessage {\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    conversationTitle: ").append(toIndentedString(conversationTitle)).append("\n");
    sb.append("    conversationUid: ").append(toIndentedString(conversationUid)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    staffId: ").append(toIndentedString(staffId)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channels");
    openapiFields.add("client_id");
    openapiFields.add("conversation_title");
    openapiFields.add("conversation_uid");
    openapiFields.add("direction");
    openapiFields.add("staff_id");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessagesMessage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MessagesMessage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessagesMessage is not found in the empty JSON string", MessagesMessage.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MessagesMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessagesMessage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessagesMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessagesMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessagesMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessagesMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<MessagesMessage>() {
           @Override
           public void write(JsonWriter out, MessagesMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessagesMessage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessagesMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessagesMessage
  * @throws IOException if the JSON string is invalid with respect to MessagesMessage
  */
  public static MessagesMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessagesMessage.class);
  }

 /**
  * Convert an instance of MessagesMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

