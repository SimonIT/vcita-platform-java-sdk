/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * Availability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Availability {
  public static final String SERIALIZED_NAME_CHARGE_TYPE = "charge_type";
  @SerializedName(SERIALIZED_NAME_CHARGE_TYPE)
  private String chargeType;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DURATION_MINUTES = "duration_minutes";
  @SerializedName(SERIALIZED_NAME_DURATION_MINUTES)
  private Integer durationMinutes;

  public static final String SERIALIZED_NAME_EVENT_INSTANCE_ID = "event_instance_id";
  @SerializedName(SERIALIZED_NAME_EVENT_INSTANCE_ID)
  private String eventInstanceId;

  public static final String SERIALIZED_NAME_INTERACTION_DETAILS = "interaction_details";
  @SerializedName(SERIALIZED_NAME_INTERACTION_DETAILS)
  private String interactionDetails;

  public static final String SERIALIZED_NAME_INTERACTION_TYPE = "interaction_type";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE)
  private String interactionType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_SPOTS_OPEN = "spots_open";
  @SerializedName(SERIALIZED_NAME_SPOTS_OPEN)
  private Integer spotsOpen;

  public static final String SERIALIZED_NAME_SPOTS_TOTAL = "spots_total";
  @SerializedName(SERIALIZED_NAME_SPOTS_TOTAL)
  private Integer spotsTotal;

  public static final String SERIALIZED_NAME_STAFF_ID = "staff_id";
  @SerializedName(SERIALIZED_NAME_STAFF_ID)
  private String staffId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public Availability() { 
  }

  public Availability chargeType(String chargeType) {
    
    this.chargeType = chargeType;
    return this;
  }

   /**
   * Get chargeType
   * @return chargeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChargeType() {
    return chargeType;
  }


  public void setChargeType(String chargeType) {
    this.chargeType = chargeType;
  }


  public Availability currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Availability durationMinutes(Integer durationMinutes) {
    
    this.durationMinutes = durationMinutes;
    return this;
  }

   /**
   * Get durationMinutes
   * @return durationMinutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDurationMinutes() {
    return durationMinutes;
  }


  public void setDurationMinutes(Integer durationMinutes) {
    this.durationMinutes = durationMinutes;
  }


  public Availability eventInstanceId(String eventInstanceId) {
    
    this.eventInstanceId = eventInstanceId;
    return this;
  }

   /**
   * Get eventInstanceId
   * @return eventInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventInstanceId() {
    return eventInstanceId;
  }


  public void setEventInstanceId(String eventInstanceId) {
    this.eventInstanceId = eventInstanceId;
  }


  public Availability interactionDetails(String interactionDetails) {
    
    this.interactionDetails = interactionDetails;
    return this;
  }

   /**
   * Get interactionDetails
   * @return interactionDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInteractionDetails() {
    return interactionDetails;
  }


  public void setInteractionDetails(String interactionDetails) {
    this.interactionDetails = interactionDetails;
  }


  public Availability interactionType(String interactionType) {
    
    this.interactionType = interactionType;
    return this;
  }

   /**
   * Get interactionType
   * @return interactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInteractionType() {
    return interactionType;
  }


  public void setInteractionType(String interactionType) {
    this.interactionType = interactionType;
  }


  public Availability price(Integer price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPrice() {
    return price;
  }


  public void setPrice(Integer price) {
    this.price = price;
  }


  public Availability spotsOpen(Integer spotsOpen) {
    
    this.spotsOpen = spotsOpen;
    return this;
  }

   /**
   * Get spotsOpen
   * @return spotsOpen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSpotsOpen() {
    return spotsOpen;
  }


  public void setSpotsOpen(Integer spotsOpen) {
    this.spotsOpen = spotsOpen;
  }


  public Availability spotsTotal(Integer spotsTotal) {
    
    this.spotsTotal = spotsTotal;
    return this;
  }

   /**
   * Get spotsTotal
   * @return spotsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSpotsTotal() {
    return spotsTotal;
  }


  public void setSpotsTotal(Integer spotsTotal) {
    this.spotsTotal = spotsTotal;
  }


  public Availability staffId(String staffId) {
    
    this.staffId = staffId;
    return this;
  }

   /**
   * Get staffId
   * @return staffId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStaffId() {
    return staffId;
  }


  public void setStaffId(String staffId) {
    this.staffId = staffId;
  }


  public Availability startTime(OffsetDateTime startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartTime() {
    return startTime;
  }


  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Availability availability = (Availability) o;
    return Objects.equals(this.chargeType, availability.chargeType) &&
        Objects.equals(this.currency, availability.currency) &&
        Objects.equals(this.durationMinutes, availability.durationMinutes) &&
        Objects.equals(this.eventInstanceId, availability.eventInstanceId) &&
        Objects.equals(this.interactionDetails, availability.interactionDetails) &&
        Objects.equals(this.interactionType, availability.interactionType) &&
        Objects.equals(this.price, availability.price) &&
        Objects.equals(this.spotsOpen, availability.spotsOpen) &&
        Objects.equals(this.spotsTotal, availability.spotsTotal) &&
        Objects.equals(this.staffId, availability.staffId) &&
        Objects.equals(this.startTime, availability.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargeType, currency, durationMinutes, eventInstanceId, interactionDetails, interactionType, price, spotsOpen, spotsTotal, staffId, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Availability {\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    durationMinutes: ").append(toIndentedString(durationMinutes)).append("\n");
    sb.append("    eventInstanceId: ").append(toIndentedString(eventInstanceId)).append("\n");
    sb.append("    interactionDetails: ").append(toIndentedString(interactionDetails)).append("\n");
    sb.append("    interactionType: ").append(toIndentedString(interactionType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    spotsOpen: ").append(toIndentedString(spotsOpen)).append("\n");
    sb.append("    spotsTotal: ").append(toIndentedString(spotsTotal)).append("\n");
    sb.append("    staffId: ").append(toIndentedString(staffId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charge_type");
    openapiFields.add("currency");
    openapiFields.add("duration_minutes");
    openapiFields.add("event_instance_id");
    openapiFields.add("interaction_details");
    openapiFields.add("interaction_type");
    openapiFields.add("price");
    openapiFields.add("spots_open");
    openapiFields.add("spots_total");
    openapiFields.add("staff_id");
    openapiFields.add("start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Availability
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Availability.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Availability is not found in the empty JSON string", Availability.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Availability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Availability` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Availability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Availability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Availability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Availability.class));

       return (TypeAdapter<T>) new TypeAdapter<Availability>() {
           @Override
           public void write(JsonWriter out, Availability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Availability read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Availability given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Availability
  * @throws IOException if the JSON string is invalid with respect to Availability
  */
  public static Availability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Availability.class);
  }

 /**
  * Convert an instance of Availability to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

