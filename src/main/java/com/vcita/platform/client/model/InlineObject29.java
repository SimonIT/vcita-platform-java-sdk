/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * InlineObject29
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineObject29 {
  public static final String SERIALIZED_NAME_BUSINESS_UID = "business_uid";
  @SerializedName(SERIALIZED_NAME_BUSINESS_UID)
  private String businessUid;

  public static final String SERIALIZED_NAME_CLIENT_UID = "client_uid";
  @SerializedName(SERIALIZED_NAME_CLIENT_UID)
  private String clientUid;

  public static final String SERIALIZED_NAME_EVENT_INSTANCE_UID = "event_instance_uid";
  @SerializedName(SERIALIZED_NAME_EVENT_INSTANCE_UID)
  private String eventInstanceUid;

  public static final String SERIALIZED_NAME_MATTER_UID = "matter_uid";
  @SerializedName(SERIALIZED_NAME_MATTER_UID)
  private String matterUid;

  public InlineObject29() { 
  }

  public InlineObject29 businessUid(String businessUid) {
    
    this.businessUid = businessUid;
    return this;
  }

   /**
   * Business Uid
   * @return businessUid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Business Uid")

  public String getBusinessUid() {
    return businessUid;
  }


  public void setBusinessUid(String businessUid) {
    this.businessUid = businessUid;
  }


  public InlineObject29 clientUid(String clientUid) {
    
    this.clientUid = clientUid;
    return this;
  }

   /**
   * Client Uid
   * @return clientUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Client Uid")

  public String getClientUid() {
    return clientUid;
  }


  public void setClientUid(String clientUid) {
    this.clientUid = clientUid;
  }


  public InlineObject29 eventInstanceUid(String eventInstanceUid) {
    
    this.eventInstanceUid = eventInstanceUid;
    return this;
  }

   /**
   * Event instance uid. Required for event.
   * @return eventInstanceUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event instance uid. Required for event.")

  public String getEventInstanceUid() {
    return eventInstanceUid;
  }


  public void setEventInstanceUid(String eventInstanceUid) {
    this.eventInstanceUid = eventInstanceUid;
  }


  public InlineObject29 matterUid(String matterUid) {
    
    this.matterUid = matterUid;
    return this;
  }

   /**
   * Matter Uid
   * @return matterUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Matter Uid")

  public String getMatterUid() {
    return matterUid;
  }


  public void setMatterUid(String matterUid) {
    this.matterUid = matterUid;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject29 inlineObject29 = (InlineObject29) o;
    return Objects.equals(this.businessUid, inlineObject29.businessUid) &&
        Objects.equals(this.clientUid, inlineObject29.clientUid) &&
        Objects.equals(this.eventInstanceUid, inlineObject29.eventInstanceUid) &&
        Objects.equals(this.matterUid, inlineObject29.matterUid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessUid, clientUid, eventInstanceUid, matterUid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject29 {\n");
    sb.append("    businessUid: ").append(toIndentedString(businessUid)).append("\n");
    sb.append("    clientUid: ").append(toIndentedString(clientUid)).append("\n");
    sb.append("    eventInstanceUid: ").append(toIndentedString(eventInstanceUid)).append("\n");
    sb.append("    matterUid: ").append(toIndentedString(matterUid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("business_uid");
    openapiFields.add("client_uid");
    openapiFields.add("event_instance_uid");
    openapiFields.add("matter_uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("business_uid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InlineObject29
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InlineObject29.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineObject29 is not found in the empty JSON string", InlineObject29.openapiRequiredFields.toString()));
        }
      }
      Set<java.util.Map.Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (java.util.Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineObject29.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineObject29` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineObject29.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineObject29.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineObject29' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineObject29> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineObject29.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineObject29>() {
           @Override
           public void write(JsonWriter out, InlineObject29 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineObject29 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InlineObject29 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InlineObject29
  * @throws IOException if the JSON string is invalid with respect to InlineObject29
  */
  public static InlineObject29 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineObject29.class);
  }

 /**
  * Convert an instance of InlineObject29 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

