/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * InlineObject27
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineObject27 {
  public static final String SERIALIZED_NAME_APPOINTMENT_TYPE = "appointment_type";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_TYPE)
  private String appointmentType;

  public static final String SERIALIZED_NAME_BUSINESS_ID = "business_id";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ID)
  private String businessId;

  public InlineObject27() { 
  }

  public InlineObject27 appointmentType(String appointmentType) {
    
    this.appointmentType = appointmentType;
    return this;
  }

   /**
   * Three types are valid. &#39;appointment&#39;, &#39;event_instance&#39; or &#39;event_attendance&#39;
   * @return appointmentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Three types are valid. 'appointment', 'event_instance' or 'event_attendance'")

  public String getAppointmentType() {
    return appointmentType;
  }


  public void setAppointmentType(String appointmentType) {
    this.appointmentType = appointmentType;
  }


  public InlineObject27 businessId(String businessId) {
    
    this.businessId = businessId;
    return this;
  }

   /**
   * Business UID
   * @return businessId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Business UID")

  public String getBusinessId() {
    return businessId;
  }


  public void setBusinessId(String businessId) {
    this.businessId = businessId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject27 inlineObject27 = (InlineObject27) o;
    return Objects.equals(this.appointmentType, inlineObject27.appointmentType) &&
        Objects.equals(this.businessId, inlineObject27.businessId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentType, businessId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject27 {\n");
    sb.append("    appointmentType: ").append(toIndentedString(appointmentType)).append("\n");
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appointment_type");
    openapiFields.add("business_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appointment_type");
    openapiRequiredFields.add("business_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InlineObject27
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InlineObject27.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineObject27 is not found in the empty JSON string", InlineObject27.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InlineObject27.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineObject27` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineObject27.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineObject27.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineObject27' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineObject27> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineObject27.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineObject27>() {
           @Override
           public void write(JsonWriter out, InlineObject27 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineObject27 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InlineObject27 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InlineObject27
  * @throws IOException if the JSON string is invalid with respect to InlineObject27
  */
  public static InlineObject27 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineObject27.class);
  }

 /**
  * Convert an instance of InlineObject27 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

