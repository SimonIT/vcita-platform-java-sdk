/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.vcita.platform.client.JSON;

/**
 * InlineObject23
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InlineObject23 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_OTHER_PAYMENT_METHOD = "other_payment_method";
  @SerializedName(SERIALIZED_NAME_OTHER_PAYMENT_METHOD)
  private String otherPaymentMethod;

  public static final String SERIALIZED_NAME_PAID_AT = "paid_at";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private String paidAt;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_SUBJECT_ID = "payment_subject_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SUBJECT_ID)
  private String paymentSubjectId;

  public static final String SERIALIZED_NAME_PAYMENT_SUBJECT_TYPE = "payment_subject_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SUBJECT_TYPE)
  private String paymentSubjectType;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SEND_RECEIPT = "send_receipt";
  @SerializedName(SERIALIZED_NAME_SEND_RECEIPT)
  private Boolean sendReceipt;

  public static final String SERIALIZED_NAME_STAFF_ID = "staff_id";
  @SerializedName(SERIALIZED_NAME_STAFF_ID)
  private String staffId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public InlineObject23() { 
  }

  public InlineObject23 amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "amount")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public InlineObject23 clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * client ID
   * @return clientId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "client ID")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public InlineObject23 currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * USD, ILS etc.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "USD, ILS etc.")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InlineObject23 otherPaymentMethod(String otherPaymentMethod) {
    
    this.otherPaymentMethod = otherPaymentMethod;
    return this;
  }

   /**
   * Max 24 chars
   * @return otherPaymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max 24 chars")

  public String getOtherPaymentMethod() {
    return otherPaymentMethod;
  }


  public void setOtherPaymentMethod(String otherPaymentMethod) {
    this.otherPaymentMethod = otherPaymentMethod;
  }


  public InlineObject23 paidAt(String paidAt) {
    
    this.paidAt = paidAt;
    return this;
  }

   /**
   * default is now
   * @return paidAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default is now")

  public String getPaidAt() {
    return paidAt;
  }


  public void setPaidAt(String paidAt) {
    this.paidAt = paidAt;
  }


  public InlineObject23 paymentMethod(String paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * &#39;PayPal&#39;, &#39;Other&#39;, &#39;Cash&#39;, &#39;Credit Card&#39;, &#39;Bank Transfer&#39;, &#39;Cheque&#39;
   * @return paymentMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "'PayPal', 'Other', 'Cash', 'Credit Card', 'Bank Transfer', 'Cheque'")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public InlineObject23 paymentSubjectId(String paymentSubjectId) {
    
    this.paymentSubjectId = paymentSubjectId;
    return this;
  }

   /**
   * The ID of the entity for which the payment has been made
   * @return paymentSubjectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the entity for which the payment has been made")

  public String getPaymentSubjectId() {
    return paymentSubjectId;
  }


  public void setPaymentSubjectId(String paymentSubjectId) {
    this.paymentSubjectId = paymentSubjectId;
  }


  public InlineObject23 paymentSubjectType(String paymentSubjectType) {
    
    this.paymentSubjectType = paymentSubjectType;
    return this;
  }

   /**
   * The type of entity for which the payment has been made. Available types: &#39;Meeting&#39;, &#39;EventAttendance&#39;, &#39;Invoice&#39;, &#39;ClientBookingPackage&#39;, &#39;ProductOrder&#39;.
   * @return paymentSubjectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of entity for which the payment has been made. Available types: 'Meeting', 'EventAttendance', 'Invoice', 'ClientBookingPackage', 'ProductOrder'.")

  public String getPaymentSubjectType() {
    return paymentSubjectType;
  }


  public void setPaymentSubjectType(String paymentSubjectType) {
    this.paymentSubjectType = paymentSubjectType;
  }


  public InlineObject23 reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * Max 24 chars
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max 24 chars")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }


  public InlineObject23 sendReceipt(Boolean sendReceipt) {
    
    this.sendReceipt = sendReceipt;
    return this;
  }

   /**
   * true, false. default true
   * @return sendReceipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true, false. default true")

  public Boolean getSendReceipt() {
    return sendReceipt;
  }


  public void setSendReceipt(Boolean sendReceipt) {
    this.sendReceipt = sendReceipt;
  }


  public InlineObject23 staffId(String staffId) {
    
    this.staffId = staffId;
    return this;
  }

   /**
   * Default is set to the staff that performed the API call. Business owner is allowed to send staff_id
   * @return staffId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default is set to the staff that performed the API call. Business owner is allowed to send staff_id")

  public String getStaffId() {
    return staffId;
  }


  public void setStaffId(String staffId) {
    this.staffId = staffId;
  }


  public InlineObject23 title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * paid for service or product
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "paid for service or product")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineObject23 inlineObject23 = (InlineObject23) o;
    return Objects.equals(this.amount, inlineObject23.amount) &&
        Objects.equals(this.clientId, inlineObject23.clientId) &&
        Objects.equals(this.currency, inlineObject23.currency) &&
        Objects.equals(this.otherPaymentMethod, inlineObject23.otherPaymentMethod) &&
        Objects.equals(this.paidAt, inlineObject23.paidAt) &&
        Objects.equals(this.paymentMethod, inlineObject23.paymentMethod) &&
        Objects.equals(this.paymentSubjectId, inlineObject23.paymentSubjectId) &&
        Objects.equals(this.paymentSubjectType, inlineObject23.paymentSubjectType) &&
        Objects.equals(this.reference, inlineObject23.reference) &&
        Objects.equals(this.sendReceipt, inlineObject23.sendReceipt) &&
        Objects.equals(this.staffId, inlineObject23.staffId) &&
        Objects.equals(this.title, inlineObject23.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, clientId, currency, otherPaymentMethod, paidAt, paymentMethod, paymentSubjectId, paymentSubjectType, reference, sendReceipt, staffId, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineObject23 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    otherPaymentMethod: ").append(toIndentedString(otherPaymentMethod)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentSubjectId: ").append(toIndentedString(paymentSubjectId)).append("\n");
    sb.append("    paymentSubjectType: ").append(toIndentedString(paymentSubjectType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    sendReceipt: ").append(toIndentedString(sendReceipt)).append("\n");
    sb.append("    staffId: ").append(toIndentedString(staffId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("client_id");
    openapiFields.add("currency");
    openapiFields.add("other_payment_method");
    openapiFields.add("paid_at");
    openapiFields.add("payment_method");
    openapiFields.add("payment_subject_id");
    openapiFields.add("payment_subject_type");
    openapiFields.add("reference");
    openapiFields.add("send_receipt");
    openapiFields.add("staff_id");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("client_id");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("payment_method");
    openapiRequiredFields.add("title");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InlineObject23
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (InlineObject23.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has reuqired fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineObject23 is not found in the empty JSON string", InlineObject23.openapiRequiredFields.toString()));
        }
      }
      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InlineObject23.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineObject23` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InlineObject23.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineObject23.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineObject23' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineObject23> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineObject23.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineObject23>() {
           @Override
           public void write(JsonWriter out, InlineObject23 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineObject23 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InlineObject23 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InlineObject23
  * @throws IOException if the JSON string is invalid with respect to InlineObject23
  */
  public static InlineObject23 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineObject23.class);
  }

 /**
  * Convert an instance of InlineObject23 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

