/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.AppsGet201Response;
import com.vcita.platform.client.model.AppsIdAssignPost201Response;
import com.vcita.platform.client.model.AppsIdGet200Response;
import com.vcita.platform.client.model.AppsIdInstallAppPost201Response;
import com.vcita.platform.client.model.AppsIdInstallAppPost422Response;
import com.vcita.platform.client.model.AppsIdPut200Response;
import com.vcita.platform.client.model.AppsIdUnassignPost201Response;
import com.vcita.platform.client.model.AppsIdUninstallAppPost201Response;
import com.vcita.platform.client.model.AppsIdUninstallAppPost422Response;
import com.vcita.platform.client.model.AppsPost201Response;
import com.vcita.platform.client.model.InlineObject;
import com.vcita.platform.client.model.InlineObject1;
import com.vcita.platform.client.model.InlineObject2;
import com.vcita.platform.client.model.InlineObject3;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsGet(Async)");
        }
        

        okhttp3.Call localVarCall = appsGetCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * List of apps
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return AppsGet201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public AppsGet201Response appsGet(String authorization) throws ApiException {
        ApiResponse<AppsGet201Response> localVarResp = appsGetWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * List of apps
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ApiResponse&lt;AppsGet201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsGet201Response> appsGetWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = appsGetValidateBeforeCall(authorization, null);
        try {
            Type localVarReturnType = new TypeToken<AppsGet201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsGet201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsGet201Response>(){});
            throw e;
        }
    }

    /**
     * List of apps (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetAsync(String authorization, final ApiCallback<AppsGet201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<AppsGet201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdAssignPost
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdAssignPostCall(String id, String authorization, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject2;

        // create path and map variables
        String localVarPath = "/apps/{id}/assign"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdAssignPostValidateBeforeCall(String id, String authorization, InlineObject2 inlineObject2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdAssignPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdAssignPost(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdAssignPostCall(id, authorization, inlineObject2, _callback);
        return localVarCall;

    }

    /**
     * Assign an app on directory or a business [Internal]
     * Assign an application to business or directory so that it can be viewed in the App Market
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject2  (optional)
     * @return AppsIdAssignPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdAssignPost201Response appsIdAssignPost(String id, String authorization, InlineObject2 inlineObject2) throws ApiException {
        ApiResponse<AppsIdAssignPost201Response> localVarResp = appsIdAssignPostWithHttpInfo(id, authorization, inlineObject2);
        return localVarResp.getData();
    }

    /**
     * Assign an app on directory or a business [Internal]
     * Assign an application to business or directory so that it can be viewed in the App Market
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject2  (optional)
     * @return ApiResponse&lt;AppsIdAssignPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdAssignPost201Response> appsIdAssignPostWithHttpInfo(String id, String authorization, InlineObject2 inlineObject2) throws ApiException {
        okhttp3.Call localVarCall = appsIdAssignPostValidateBeforeCall(id, authorization, inlineObject2, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdAssignPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdAssignPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdAssignPost201Response>(){});
            throw e;
        }
    }

    /**
     * Assign an app on directory or a business [Internal] (asynchronously)
     * Assign an application to business or directory so that it can be viewed in the App Market
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdAssignPostAsync(String id, String authorization, InlineObject2 inlineObject2, final ApiCallback<AppsIdAssignPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdAssignPostValidateBeforeCall(id, authorization, inlineObject2, _callback);
        Type localVarReturnType = new TypeToken<AppsIdAssignPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdGet
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdGetCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdGetValidateBeforeCall(String id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdGetCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * Read an app
     * Returns an app its by code name, if it is associated with the token&#39;s directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return AppsIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdGet200Response appsIdGet(String id, String authorization) throws ApiException {
        ApiResponse<AppsIdGet200Response> localVarResp = appsIdGetWithHttpInfo(id, authorization);
        return localVarResp.getData();
    }

    /**
     * Read an app
     * Returns an app its by code name, if it is associated with the token&#39;s directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ApiResponse&lt;AppsIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdGet200Response> appsIdGetWithHttpInfo(String id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = appsIdGetValidateBeforeCall(id, authorization, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdGet200Response>(){});
            throw e;
        }
    }

    /**
     * Read an app (asynchronously)
     * Returns an app its by code name, if it is associated with the token&#39;s directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdGetAsync(String id, String authorization, final ApiCallback<AppsIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdGetValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<AppsIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdInstallAppPost
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdInstallAppPostCall(String id, String authorization, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{id}/install_app"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdInstallAppPostValidateBeforeCall(String id, String authorization, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdInstallAppPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdInstallAppPost(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdInstallAppPostCall(id, authorization, body, _callback);
        return localVarCall;

    }

    /**
     * Install an app [Internal]
     * Installs an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @return AppsIdInstallAppPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdInstallAppPost201Response appsIdInstallAppPost(String id, String authorization, Object body) throws ApiException {
        ApiResponse<AppsIdInstallAppPost201Response> localVarResp = appsIdInstallAppPostWithHttpInfo(id, authorization, body);
        return localVarResp.getData();
    }

    /**
     * Install an app [Internal]
     * Installs an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AppsIdInstallAppPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdInstallAppPost201Response> appsIdInstallAppPostWithHttpInfo(String id, String authorization, Object body) throws ApiException {
        okhttp3.Call localVarCall = appsIdInstallAppPostValidateBeforeCall(id, authorization, body, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdInstallAppPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdInstallAppPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdInstallAppPost201Response>(){});
            throw e;
        }
    }

    /**
     * Install an app [Internal] (asynchronously)
     * Installs an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdInstallAppPostAsync(String id, String authorization, Object body, final ApiCallback<AppsIdInstallAppPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdInstallAppPostValidateBeforeCall(id, authorization, body, _callback);
        Type localVarReturnType = new TypeToken<AppsIdInstallAppPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdPut
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdPutCall(String id, String authorization, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/apps/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdPutValidateBeforeCall(String id, String authorization, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdPut(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdPutCall(id, authorization, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Updates an app
     * Updates an app by the code name specified in the path
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject1  (optional)
     * @return AppsIdPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdPut200Response appsIdPut(String id, String authorization, InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<AppsIdPut200Response> localVarResp = appsIdPutWithHttpInfo(id, authorization, inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Updates an app
     * Updates an app by the code name specified in the path
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;AppsIdPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdPut200Response> appsIdPutWithHttpInfo(String id, String authorization, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = appsIdPutValidateBeforeCall(id, authorization, inlineObject1, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdPut200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdPut200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdPut200Response>(){});
            throw e;
        }
    }

    /**
     * Updates an app (asynchronously)
     * Updates an app by the code name specified in the path
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdPutAsync(String id, String authorization, InlineObject1 inlineObject1, final ApiCallback<AppsIdPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdPutValidateBeforeCall(id, authorization, inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<AppsIdPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdUnassignPost
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdUnassignPostCall(String id, String authorization, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject3;

        // create path and map variables
        String localVarPath = "/apps/{id}/unassign"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdUnassignPostValidateBeforeCall(String id, String authorization, InlineObject3 inlineObject3, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdUnassignPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdUnassignPost(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdUnassignPostCall(id, authorization, inlineObject3, _callback);
        return localVarCall;

    }

    /**
     * Unassign an app on directory or a business [Internal]
     * Unassign an application from business or directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject3  (optional)
     * @return AppsIdUnassignPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdUnassignPost201Response appsIdUnassignPost(String id, String authorization, InlineObject3 inlineObject3) throws ApiException {
        ApiResponse<AppsIdUnassignPost201Response> localVarResp = appsIdUnassignPostWithHttpInfo(id, authorization, inlineObject3);
        return localVarResp.getData();
    }

    /**
     * Unassign an app on directory or a business [Internal]
     * Unassign an application from business or directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject3  (optional)
     * @return ApiResponse&lt;AppsIdUnassignPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdUnassignPost201Response> appsIdUnassignPostWithHttpInfo(String id, String authorization, InlineObject3 inlineObject3) throws ApiException {
        okhttp3.Call localVarCall = appsIdUnassignPostValidateBeforeCall(id, authorization, inlineObject3, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdUnassignPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdUnassignPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdUnassignPost201Response>(){});
            throw e;
        }
    }

    /**
     * Unassign an app on directory or a business [Internal] (asynchronously)
     * Unassign an application from business or directory
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdUnassignPostAsync(String id, String authorization, InlineObject3 inlineObject3, final ApiCallback<AppsIdUnassignPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdUnassignPostValidateBeforeCall(id, authorization, inlineObject3, _callback);
        Type localVarReturnType = new TypeToken<AppsIdUnassignPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsIdUninstallAppPost
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdUninstallAppPostCall(String id, String authorization, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{id}/uninstall_app"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsIdUninstallAppPostValidateBeforeCall(String id, String authorization, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appsIdUninstallAppPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsIdUninstallAppPost(Async)");
        }
        

        okhttp3.Call localVarCall = appsIdUninstallAppPostCall(id, authorization, body, _callback);
        return localVarCall;

    }

    /**
     * Uninstall an app [Internal]
     * Uninstalls an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @return AppsIdUninstallAppPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public AppsIdUninstallAppPost201Response appsIdUninstallAppPost(String id, String authorization, Object body) throws ApiException {
        ApiResponse<AppsIdUninstallAppPost201Response> localVarResp = appsIdUninstallAppPostWithHttpInfo(id, authorization, body);
        return localVarResp.getData();
    }

    /**
     * Uninstall an app [Internal]
     * Uninstalls an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AppsIdUninstallAppPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsIdUninstallAppPost201Response> appsIdUninstallAppPostWithHttpInfo(String id, String authorization, Object body) throws ApiException {
        okhttp3.Call localVarCall = appsIdUninstallAppPostValidateBeforeCall(id, authorization, body, null);
        try {
            Type localVarReturnType = new TypeToken<AppsIdUninstallAppPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsIdUninstallAppPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsIdUninstallAppPost201Response>(){});
            throw e;
        }
    }

    /**
     * Uninstall an app [Internal] (asynchronously)
     * Uninstalls an app for the business whose token was used for authorization
     * @param id App code name (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsIdUninstallAppPostAsync(String id, String authorization, Object body, final ApiCallback<AppsIdUninstallAppPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsIdUninstallAppPostValidateBeforeCall(id, authorization, body, _callback);
        Type localVarReturnType = new TypeToken<AppsIdUninstallAppPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPostCall(String authorization, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPostValidateBeforeCall(String authorization, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling appsPost(Async)");
        }
        

        okhttp3.Call localVarCall = appsPostCall(authorization, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Creates an app
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject  (optional)
     * @return AppsPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public AppsPost201Response appsPost(String authorization, InlineObject inlineObject) throws ApiException {
        ApiResponse<AppsPost201Response> localVarResp = appsPostWithHttpInfo(authorization, inlineObject);
        return localVarResp.getData();
    }

    /**
     * Creates an app
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;AppsPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsPost201Response> appsPostWithHttpInfo(String authorization, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = appsPostValidateBeforeCall(authorization, inlineObject, null);
        try {
            Type localVarReturnType = new TypeToken<AppsPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<AppsPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<AppsPost201Response>(){});
            throw e;
        }
    }

    /**
     * Creates an app (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> app created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPostAsync(String authorization, InlineObject inlineObject, final ApiCallback<AppsPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPostValidateBeforeCall(authorization, inlineObject, _callback);
        Type localVarReturnType = new TypeToken<AppsPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
