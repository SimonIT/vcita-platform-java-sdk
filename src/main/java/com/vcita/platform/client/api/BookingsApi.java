/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.Booking;
import com.vcita.platform.client.model.InlineObject25;
import com.vcita.platform.client.model.InlineObject26;
import com.vcita.platform.client.model.InlineObject27;
import com.vcita.platform.client.model.InlineObject28;
import com.vcita.platform.client.model.InlineObject29;
import com.vcita.platform.client.model.SchedulingBookingsBookingUidUpdateRsvpStatePut200Response;
import com.vcita.platform.client.model.SchedulingBookingsPost201Response;
import com.vcita.platform.client.model.SchedulingBookingsPost422Response;
import com.vcita.platform.client.model.SchedulingWaitlistCancelPut200Response;
import com.vcita.platform.client.model.SchedulingWaitlistPost201Response;
import com.vcita.platform.client.model.SchedulingWaitlistPost422Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BookingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulingBookingsBookingUidUpdateRsvpStatePut
     * @param bookingUid Booking UID (required)
     * @param newRsvpState New RSVP State. &#39;confirmed&#39; is the only valid option. any other state is forbidden (return 403) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject27  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsBookingUidUpdateRsvpStatePutCall(String bookingUid, String newRsvpState, String authorization, InlineObject27 inlineObject27, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject27;

        // create path and map variables
        String localVarPath = "/scheduling/bookings/{booking_uid}/update_rsvp_state"
            .replaceAll("\\{" + "booking_uid" + "\\}", localVarApiClient.escapeString(bookingUid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newRsvpState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("new_rsvp_state", newRsvpState));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingBookingsBookingUidUpdateRsvpStatePutValidateBeforeCall(String bookingUid, String newRsvpState, String authorization, InlineObject27 inlineObject27, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bookingUid' is set
        if (bookingUid == null) {
            throw new ApiException("Missing the required parameter 'bookingUid' when calling schedulingBookingsBookingUidUpdateRsvpStatePut(Async)");
        }
        
        // verify the required parameter 'newRsvpState' is set
        if (newRsvpState == null) {
            throw new ApiException("Missing the required parameter 'newRsvpState' when calling schedulingBookingsBookingUidUpdateRsvpStatePut(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingBookingsBookingUidUpdateRsvpStatePut(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingBookingsBookingUidUpdateRsvpStatePutCall(bookingUid, newRsvpState, authorization, inlineObject27, _callback);
        return localVarCall;

    }

    /**
     * Update RSVP state
     * Update RSVP state
     * @param bookingUid Booking UID (required)
     * @param newRsvpState New RSVP State. &#39;confirmed&#39; is the only valid option. any other state is forbidden (return 403) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject27  (optional)
     * @return SchedulingBookingsBookingUidUpdateRsvpStatePut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingBookingsBookingUidUpdateRsvpStatePut200Response schedulingBookingsBookingUidUpdateRsvpStatePut(String bookingUid, String newRsvpState, String authorization, InlineObject27 inlineObject27) throws ApiException {
        ApiResponse<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response> localVarResp = schedulingBookingsBookingUidUpdateRsvpStatePutWithHttpInfo(bookingUid, newRsvpState, authorization, inlineObject27);
        return localVarResp.getData();
    }

    /**
     * Update RSVP state
     * Update RSVP state
     * @param bookingUid Booking UID (required)
     * @param newRsvpState New RSVP State. &#39;confirmed&#39; is the only valid option. any other state is forbidden (return 403) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject27  (optional)
     * @return ApiResponse&lt;SchedulingBookingsBookingUidUpdateRsvpStatePut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response> schedulingBookingsBookingUidUpdateRsvpStatePutWithHttpInfo(String bookingUid, String newRsvpState, String authorization, InlineObject27 inlineObject27) throws ApiException {
        okhttp3.Call localVarCall = schedulingBookingsBookingUidUpdateRsvpStatePutValidateBeforeCall(bookingUid, newRsvpState, authorization, inlineObject27, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response>(){});
            throw e;
        }
    }

    /**
     * Update RSVP state (asynchronously)
     * Update RSVP state
     * @param bookingUid Booking UID (required)
     * @param newRsvpState New RSVP State. &#39;confirmed&#39; is the only valid option. any other state is forbidden (return 403) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject27  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsBookingUidUpdateRsvpStatePutAsync(String bookingUid, String newRsvpState, String authorization, InlineObject27 inlineObject27, final ApiCallback<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingBookingsBookingUidUpdateRsvpStatePutValidateBeforeCall(bookingUid, newRsvpState, authorization, inlineObject27, _callback);
        Type localVarReturnType = new TypeToken<SchedulingBookingsBookingUidUpdateRsvpStatePut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingBookingsCancelPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject26  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsCancelPostCall(String authorization, InlineObject26 inlineObject26, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject26;

        // create path and map variables
        String localVarPath = "/scheduling/bookings/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingBookingsCancelPostValidateBeforeCall(String authorization, InlineObject26 inlineObject26, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingBookingsCancelPost(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingBookingsCancelPostCall(authorization, inlineObject26, _callback);
        return localVarCall;

    }

    /**
     * Cancel a Booking [Alpha]
     * cancel booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject26  (optional)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Booking schedulingBookingsCancelPost(String authorization, InlineObject26 inlineObject26) throws ApiException {
        ApiResponse<Booking> localVarResp = schedulingBookingsCancelPostWithHttpInfo(authorization, inlineObject26);
        return localVarResp.getData();
    }

    /**
     * Cancel a Booking [Alpha]
     * cancel booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject26  (optional)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> schedulingBookingsCancelPostWithHttpInfo(String authorization, InlineObject26 inlineObject26) throws ApiException {
        okhttp3.Call localVarCall = schedulingBookingsCancelPostValidateBeforeCall(authorization, inlineObject26, null);
        try {
            Type localVarReturnType = new TypeToken<Booking>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Booking>(){}.getType()));
            e.setErrorObjectType(new GenericType<Booking>(){});
            throw e;
        }
    }

    /**
     * Cancel a Booking [Alpha] (asynchronously)
     * cancel booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject26  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsCancelPostAsync(String authorization, InlineObject26 inlineObject26, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingBookingsCancelPostValidateBeforeCall(authorization, inlineObject26, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingBookingsGet
     * @param perPage Maximum number of records which are returned for the request (required)
     * @param offset First record&#39;s index in the returned list (e.g. per_page &#x3D; 10, offset &#x3D; 1, reords 11 to 20 are returned) (required)
     * @param businessId Business UID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param matterUid Matter UID (optional)
     * @param passed If equals to true, returns records from the past only. Otherwise, returns future bookings as well. (optional)
     * @param startTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is bigger than this parameter (optional)
     * @param endTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is smaller than this parameter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsGetCall(String perPage, String offset, String businessId, String authorization, String matterUid, String passed, String startTime, String endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduling/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (businessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("business_id", businessId));
        }

        if (matterUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matter_uid", matterUid));
        }

        if (passed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passed", passed));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingBookingsGetValidateBeforeCall(String perPage, String offset, String businessId, String authorization, String matterUid, String passed, String startTime, String endTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling schedulingBookingsGet(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling schedulingBookingsGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling schedulingBookingsGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingBookingsGet(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingBookingsGetCall(perPage, offset, businessId, authorization, matterUid, passed, startTime, endTime, _callback);
        return localVarCall;

    }

    /**
     * Get Bookings [Alpha] 
     * Get bookings of client
     * @param perPage Maximum number of records which are returned for the request (required)
     * @param offset First record&#39;s index in the returned list (e.g. per_page &#x3D; 10, offset &#x3D; 1, reords 11 to 20 are returned) (required)
     * @param businessId Business UID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param matterUid Matter UID (optional)
     * @param passed If equals to true, returns records from the past only. Otherwise, returns future bookings as well. (optional)
     * @param startTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is bigger than this parameter (optional)
     * @param endTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is smaller than this parameter (optional)
     * @return List&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Booking> schedulingBookingsGet(String perPage, String offset, String businessId, String authorization, String matterUid, String passed, String startTime, String endTime) throws ApiException {
        ApiResponse<List<Booking>> localVarResp = schedulingBookingsGetWithHttpInfo(perPage, offset, businessId, authorization, matterUid, passed, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Get Bookings [Alpha] 
     * Get bookings of client
     * @param perPage Maximum number of records which are returned for the request (required)
     * @param offset First record&#39;s index in the returned list (e.g. per_page &#x3D; 10, offset &#x3D; 1, reords 11 to 20 are returned) (required)
     * @param businessId Business UID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param matterUid Matter UID (optional)
     * @param passed If equals to true, returns records from the past only. Otherwise, returns future bookings as well. (optional)
     * @param startTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is bigger than this parameter (optional)
     * @param endTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is smaller than this parameter (optional)
     * @return ApiResponse&lt;List&lt;Booking&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Booking>> schedulingBookingsGetWithHttpInfo(String perPage, String offset, String businessId, String authorization, String matterUid, String passed, String startTime, String endTime) throws ApiException {
        okhttp3.Call localVarCall = schedulingBookingsGetValidateBeforeCall(perPage, offset, businessId, authorization, matterUid, passed, startTime, endTime, null);
        try {
            Type localVarReturnType = new TypeToken<List<Booking>>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<List<Booking>>(){}.getType()));
            e.setErrorObjectType(new GenericType<List<Booking>>(){});
            throw e;
        }
    }

    /**
     * Get Bookings [Alpha]  (asynchronously)
     * Get bookings of client
     * @param perPage Maximum number of records which are returned for the request (required)
     * @param offset First record&#39;s index in the returned list (e.g. per_page &#x3D; 10, offset &#x3D; 1, reords 11 to 20 are returned) (required)
     * @param businessId Business UID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param matterUid Matter UID (optional)
     * @param passed If equals to true, returns records from the past only. Otherwise, returns future bookings as well. (optional)
     * @param startTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is bigger than this parameter (optional)
     * @param endTime Relevant to recurring appointment/event, returns appointment/event attendance which their start_time is smaller than this parameter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsGetAsync(String perPage, String offset, String businessId, String authorization, String matterUid, String passed, String startTime, String endTime, final ApiCallback<List<Booking>> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingBookingsGetValidateBeforeCall(perPage, offset, businessId, authorization, matterUid, passed, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<List<Booking>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingBookingsPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject25  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsPostCall(String authorization, InlineObject25 inlineObject25, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject25;

        // create path and map variables
        String localVarPath = "/scheduling/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingBookingsPostValidateBeforeCall(String authorization, InlineObject25 inlineObject25, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingBookingsPost(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingBookingsPostCall(authorization, inlineObject25, _callback);
        return localVarCall;

    }

    /**
     * Create New Booking [Alpha]
     * Create Booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject25  (optional)
     * @return SchedulingBookingsPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingBookingsPost201Response schedulingBookingsPost(String authorization, InlineObject25 inlineObject25) throws ApiException {
        ApiResponse<SchedulingBookingsPost201Response> localVarResp = schedulingBookingsPostWithHttpInfo(authorization, inlineObject25);
        return localVarResp.getData();
    }

    /**
     * Create New Booking [Alpha]
     * Create Booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject25  (optional)
     * @return ApiResponse&lt;SchedulingBookingsPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingBookingsPost201Response> schedulingBookingsPostWithHttpInfo(String authorization, InlineObject25 inlineObject25) throws ApiException {
        okhttp3.Call localVarCall = schedulingBookingsPostValidateBeforeCall(authorization, inlineObject25, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingBookingsPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SchedulingBookingsPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<SchedulingBookingsPost201Response>(){});
            throw e;
        }
    }

    /**
     * Create New Booking [Alpha] (asynchronously)
     * Create Booking
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject25  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingBookingsPostAsync(String authorization, InlineObject25 inlineObject25, final ApiCallback<SchedulingBookingsPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingBookingsPostValidateBeforeCall(authorization, inlineObject25, _callback);
        Type localVarReturnType = new TypeToken<SchedulingBookingsPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingWaitlistCancelPut
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject29  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingWaitlistCancelPutCall(String authorization, InlineObject29 inlineObject29, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject29;

        // create path and map variables
        String localVarPath = "/scheduling/waitlist/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingWaitlistCancelPutValidateBeforeCall(String authorization, InlineObject29 inlineObject29, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingWaitlistCancelPut(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingWaitlistCancelPutCall(authorization, inlineObject29, _callback);
        return localVarCall;

    }

    /**
     * Cancel a Waitlist registration
     * Cancel a Waitlist registration
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject29  (optional)
     * @return SchedulingWaitlistCancelPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingWaitlistCancelPut200Response schedulingWaitlistCancelPut(String authorization, InlineObject29 inlineObject29) throws ApiException {
        ApiResponse<SchedulingWaitlistCancelPut200Response> localVarResp = schedulingWaitlistCancelPutWithHttpInfo(authorization, inlineObject29);
        return localVarResp.getData();
    }

    /**
     * Cancel a Waitlist registration
     * Cancel a Waitlist registration
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject29  (optional)
     * @return ApiResponse&lt;SchedulingWaitlistCancelPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingWaitlistCancelPut200Response> schedulingWaitlistCancelPutWithHttpInfo(String authorization, InlineObject29 inlineObject29) throws ApiException {
        okhttp3.Call localVarCall = schedulingWaitlistCancelPutValidateBeforeCall(authorization, inlineObject29, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingWaitlistCancelPut200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SchedulingWaitlistCancelPut200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<SchedulingWaitlistCancelPut200Response>(){});
            throw e;
        }
    }

    /**
     * Cancel a Waitlist registration (asynchronously)
     * Cancel a Waitlist registration
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject29  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingWaitlistCancelPutAsync(String authorization, InlineObject29 inlineObject29, final ApiCallback<SchedulingWaitlistCancelPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingWaitlistCancelPutValidateBeforeCall(authorization, inlineObject29, _callback);
        Type localVarReturnType = new TypeToken<SchedulingWaitlistCancelPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingWaitlistPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject28  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingWaitlistPostCall(String authorization, InlineObject28 inlineObject28, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject28;

        // create path and map variables
        String localVarPath = "/scheduling/waitlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingWaitlistPostValidateBeforeCall(String authorization, InlineObject28 inlineObject28, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling schedulingWaitlistPost(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingWaitlistPostCall(authorization, inlineObject28, _callback);
        return localVarCall;

    }

    /**
     * Create event Waitlist
     * Create event Waitlist
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject28  (optional)
     * @return SchedulingWaitlistPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingWaitlistPost201Response schedulingWaitlistPost(String authorization, InlineObject28 inlineObject28) throws ApiException {
        ApiResponse<SchedulingWaitlistPost201Response> localVarResp = schedulingWaitlistPostWithHttpInfo(authorization, inlineObject28);
        return localVarResp.getData();
    }

    /**
     * Create event Waitlist
     * Create event Waitlist
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject28  (optional)
     * @return ApiResponse&lt;SchedulingWaitlistPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingWaitlistPost201Response> schedulingWaitlistPostWithHttpInfo(String authorization, InlineObject28 inlineObject28) throws ApiException {
        okhttp3.Call localVarCall = schedulingWaitlistPostValidateBeforeCall(authorization, inlineObject28, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingWaitlistPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<SchedulingWaitlistPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<SchedulingWaitlistPost201Response>(){});
            throw e;
        }
    }

    /**
     * Create event Waitlist (asynchronously)
     * Create event Waitlist
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject28  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingWaitlistPostAsync(String authorization, InlineObject28 inlineObject28, final ApiCallback<SchedulingWaitlistPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingWaitlistPostValidateBeforeCall(authorization, inlineObject28, _callback);
        Type localVarReturnType = new TypeToken<SchedulingWaitlistPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
