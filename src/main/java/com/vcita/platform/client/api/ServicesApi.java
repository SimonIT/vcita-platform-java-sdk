/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.CategoriesCategoryIdServicesGet200Response;
import com.vcita.platform.client.model.GlobalServicesGet200Response;
import com.vcita.platform.client.model.ServicesGet200Response;
import com.vcita.platform.client.model.ServicesServiceIdGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoriesCategoryIdServicesGet
     * @param categoryId Service ID (required)
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdServicesGetCall(String categoryId, String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{category_id}/services"
            .replaceAll("\\{" + "category_id" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (businessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("business_id", businessId));
        }

        if (staffArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "staff_array", staffArray));
        }

        if (hasFutureInstance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_future_instance", hasFutureInstance));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesCategoryIdServicesGetValidateBeforeCall(String categoryId, String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoriesCategoryIdServicesGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling categoriesCategoryIdServicesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling categoriesCategoryIdServicesGet(Async)");
        }
        

        okhttp3.Call localVarCall = categoriesCategoryIdServicesGetCall(categoryId, businessId, authorization, staffArray, hasFutureInstance, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get Services List by category [Alpha]
     * Get Services List by category [Alpha]
     * @param categoryId Service ID (required)
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @return CategoriesCategoryIdServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CategoriesCategoryIdServicesGet200Response categoriesCategoryIdServicesGet(String categoryId, String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Integer page, Integer perPage) throws ApiException {
        ApiResponse<CategoriesCategoryIdServicesGet200Response> localVarResp = categoriesCategoryIdServicesGetWithHttpInfo(categoryId, businessId, authorization, staffArray, hasFutureInstance, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get Services List by category [Alpha]
     * Get Services List by category [Alpha]
     * @param categoryId Service ID (required)
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @return ApiResponse&lt;CategoriesCategoryIdServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoriesCategoryIdServicesGet200Response> categoriesCategoryIdServicesGetWithHttpInfo(String categoryId, String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = categoriesCategoryIdServicesGetValidateBeforeCall(categoryId, businessId, authorization, staffArray, hasFutureInstance, page, perPage, null);
        try {
            Type localVarReturnType = new TypeToken<CategoriesCategoryIdServicesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Services List by category [Alpha] (asynchronously)
     * Get Services List by category [Alpha]
     * @param categoryId Service ID (required)
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesCategoryIdServicesGetAsync(String categoryId, String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Integer page, Integer perPage, final ApiCallback<CategoriesCategoryIdServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesCategoryIdServicesGetValidateBeforeCall(categoryId, businessId, authorization, staffArray, hasFutureInstance, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CategoriesCategoryIdServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalServicesGet
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalServicesGetCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/global/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalServicesGetValidateBeforeCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling globalServicesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling globalServicesGet(Async)");
        }
        

        okhttp3.Call localVarCall = globalServicesGetCall(date, authorization, page, _callback);
        return localVarCall;

    }

    /**
     * Gets a list of services
     * Gets a list of services
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return GlobalServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GlobalServicesGet200Response globalServicesGet(String date, String authorization, Integer page) throws ApiException {
        ApiResponse<GlobalServicesGet200Response> localVarResp = globalServicesGetWithHttpInfo(date, authorization, page);
        return localVarResp.getData();
    }

    /**
     * Gets a list of services
     * Gets a list of services
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return ApiResponse&lt;GlobalServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalServicesGet200Response> globalServicesGetWithHttpInfo(String date, String authorization, Integer page) throws ApiException {
        okhttp3.Call localVarCall = globalServicesGetValidateBeforeCall(date, authorization, page, null);
        try {
            Type localVarReturnType = new TypeToken<GlobalServicesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Gets a list of services (asynchronously)
     * Gets a list of services
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalServicesGetAsync(String date, String authorization, Integer page, final ApiCallback<GlobalServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalServicesGetValidateBeforeCall(date, authorization, page, _callback);
        Type localVarReturnType = new TypeToken<GlobalServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param includeHidden Including hidden services (optional)
     * @param activeStaffOnly Return only services which at least one of the staff of the service is active (optional)
     * @param extraDecoratorFields Adding the following fields to response: min_hours_before_meeting , future_bookings_limit, remind_before_in_hours_1, remind_before_in_hours_2, meeting_reminder_sms_1, sms_booking_confirmation, meeting_reminder_sms_2, auto_follow_up_hours, default_staff, order, rwg_eligible, padding (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetCall(String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Boolean includeHidden, Boolean activeStaffOnly, Boolean extraDecoratorFields, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (businessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("business_id", businessId));
        }

        if (staffArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "staff_array", staffArray));
        }

        if (hasFutureInstance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_future_instance", hasFutureInstance));
        }

        if (includeHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_hidden", includeHidden));
        }

        if (activeStaffOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active_staff_only", activeStaffOnly));
        }

        if (extraDecoratorFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_decorator_fields", extraDecoratorFields));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetValidateBeforeCall(String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Boolean includeHidden, Boolean activeStaffOnly, Boolean extraDecoratorFields, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling servicesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling servicesGet(Async)");
        }
        

        okhttp3.Call localVarCall = servicesGetCall(businessId, authorization, staffArray, hasFutureInstance, includeHidden, activeStaffOnly, extraDecoratorFields, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get Services List [Alpha]
     * Get Services List [Alpha]
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param includeHidden Including hidden services (optional)
     * @param activeStaffOnly Return only services which at least one of the staff of the service is active (optional)
     * @param extraDecoratorFields Adding the following fields to response: min_hours_before_meeting , future_bookings_limit, remind_before_in_hours_1, remind_before_in_hours_2, meeting_reminder_sms_1, sms_booking_confirmation, meeting_reminder_sms_2, auto_follow_up_hours, default_staff, order, rwg_eligible, padding (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesGet(String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Boolean includeHidden, Boolean activeStaffOnly, Boolean extraDecoratorFields, Integer page, Integer perPage) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesGetWithHttpInfo(businessId, authorization, staffArray, hasFutureInstance, includeHidden, activeStaffOnly, extraDecoratorFields, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get Services List [Alpha]
     * Get Services List [Alpha]
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param includeHidden Including hidden services (optional)
     * @param activeStaffOnly Return only services which at least one of the staff of the service is active (optional)
     * @param extraDecoratorFields Adding the following fields to response: min_hours_before_meeting , future_bookings_limit, remind_before_in_hours_1, remind_before_in_hours_2, meeting_reminder_sms_1, sms_booking_confirmation, meeting_reminder_sms_2, auto_follow_up_hours, default_staff, order, rwg_eligible, padding (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesGetWithHttpInfo(String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Boolean includeHidden, Boolean activeStaffOnly, Boolean extraDecoratorFields, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(businessId, authorization, staffArray, hasFutureInstance, includeHidden, activeStaffOnly, extraDecoratorFields, page, perPage, null);
        try {
            Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Services List [Alpha] (asynchronously)
     * Get Services List [Alpha]
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param staffArray Staff uids array (optional)
     * @param hasFutureInstance Return only services that have events with future instances (optional)
     * @param includeHidden Including hidden services (optional)
     * @param activeStaffOnly Return only services which at least one of the staff of the service is active (optional)
     * @param extraDecoratorFields Adding the following fields to response: min_hours_before_meeting , future_bookings_limit, remind_before_in_hours_1, remind_before_in_hours_2, meeting_reminder_sms_1, sms_booking_confirmation, meeting_reminder_sms_2, auto_follow_up_hours, default_staff, order, rwg_eligible, padding (optional)
     * @param page Page number of results. Default: 1 (optional)
     * @param perPage How many items to return per page. Default: 25. Max: 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetAsync(String businessId, String authorization, List<String> staffArray, Boolean hasFutureInstance, Boolean includeHidden, Boolean activeStaffOnly, Boolean extraDecoratorFields, Integer page, Integer perPage, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(businessId, authorization, staffArray, hasFutureInstance, includeHidden, activeStaffOnly, extraDecoratorFields, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesServiceIdGet
     * @param serviceId Service ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesServiceIdGetCall(String serviceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/{service_id}"
            .replaceAll("\\{" + "service_id" + "\\}", localVarApiClient.escapeString(serviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesServiceIdGetValidateBeforeCall(String serviceId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling servicesServiceIdGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling servicesServiceIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = servicesServiceIdGetCall(serviceId, authorization, _callback);
        return localVarCall;

    }

    /**
     * Get Service By ID [Alpha]
     * Get Service By ID [Alpha]
     * @param serviceId Service ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ServicesServiceIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ServicesServiceIdGet200Response servicesServiceIdGet(String serviceId, String authorization) throws ApiException {
        ApiResponse<ServicesServiceIdGet200Response> localVarResp = servicesServiceIdGetWithHttpInfo(serviceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Get Service By ID [Alpha]
     * Get Service By ID [Alpha]
     * @param serviceId Service ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ApiResponse&lt;ServicesServiceIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesServiceIdGet200Response> servicesServiceIdGetWithHttpInfo(String serviceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = servicesServiceIdGetValidateBeforeCall(serviceId, authorization, null);
        try {
            Type localVarReturnType = new TypeToken<ServicesServiceIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Service By ID [Alpha] (asynchronously)
     * Get Service By ID [Alpha]
     * @param serviceId Service ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesServiceIdGetAsync(String serviceId, String authorization, final ApiCallback<ServicesServiceIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesServiceIdGetValidateBeforeCall(serviceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<ServicesServiceIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
