/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.Body2;
import com.vcita.platform.client.model.ClientsClientIdPaymentClientPackagesGet200Response;
import com.vcita.platform.client.model.ClientsClientIdPaymentClientPackagesGet422Response;
import com.vcita.platform.client.model.ClientsPaymentClientPackagesUpdateUsagePost200Response;
import com.vcita.platform.client.model.ClientsPaymentClientPackagesUpdateUsagePost422Response;
import com.vcita.platform.client.model.ClientsPaymentClientPackagesValidateGet200Response;
import com.vcita.platform.client.model.ClientsPaymentClientPackagesValidateGet422Response;
import com.vcita.platform.client.model.InlineObject19;
import com.vcita.platform.client.model.PaymentClientPackagesPost201Response;
import com.vcita.platform.client.model.PaymentClientPackagesPost422Response;
import com.vcita.platform.client.model.PaymentClientPackagesUpdateUsagePost200Response;
import com.vcita.platform.client.model.PaymentClientPackagesUpdateUsagePost422Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClientPackagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClientPackagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientPackagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientsClientIdPaymentClientPackagesGet
     * @param clientId Client ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page offset (optional)
     * @param perPage Page size (default: 25) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Packages Returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdPaymentClientPackagesGetCall(String clientId, String authorization, String page, String perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{client_id}/payment/client_packages"
            .replaceAll("\\{" + "client_id" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsClientIdPaymentClientPackagesGetValidateBeforeCall(String clientId, String authorization, String page, String perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientsClientIdPaymentClientPackagesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling clientsClientIdPaymentClientPackagesGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientsClientIdPaymentClientPackagesGetCall(clientId, authorization, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * Get Client Packages List Of Client [Alpha]
     * 
     * @param clientId Client ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page offset (optional)
     * @param perPage Page size (default: 25) (optional)
     * @return ClientsClientIdPaymentClientPackagesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Packages Returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ClientsClientIdPaymentClientPackagesGet200Response clientsClientIdPaymentClientPackagesGet(String clientId, String authorization, String page, String perPage) throws ApiException {
        ApiResponse<ClientsClientIdPaymentClientPackagesGet200Response> localVarResp = clientsClientIdPaymentClientPackagesGetWithHttpInfo(clientId, authorization, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get Client Packages List Of Client [Alpha]
     * 
     * @param clientId Client ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page offset (optional)
     * @param perPage Page size (default: 25) (optional)
     * @return ApiResponse&lt;ClientsClientIdPaymentClientPackagesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Packages Returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientsClientIdPaymentClientPackagesGet200Response> clientsClientIdPaymentClientPackagesGetWithHttpInfo(String clientId, String authorization, String page, String perPage) throws ApiException {
        okhttp3.Call localVarCall = clientsClientIdPaymentClientPackagesGetValidateBeforeCall(clientId, authorization, page, perPage, null);
        try {
            Type localVarReturnType = new TypeToken<ClientsClientIdPaymentClientPackagesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<ClientsClientIdPaymentClientPackagesGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<ClientsClientIdPaymentClientPackagesGet200Response>(){});
            throw e;
        }
    }

    /**
     * Get Client Packages List Of Client [Alpha] (asynchronously)
     * 
     * @param clientId Client ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page offset (optional)
     * @param perPage Page size (default: 25) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Packages Returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdPaymentClientPackagesGetAsync(String clientId, String authorization, String page, String perPage, final ApiCallback<ClientsClientIdPaymentClientPackagesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsClientIdPaymentClientPackagesGetValidateBeforeCall(clientId, authorization, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<ClientsClientIdPaymentClientPackagesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsPaymentClientPackagesUpdateUsagePost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package updated by client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsPaymentClientPackagesUpdateUsagePostCall(String authorization, Body2 body2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body2;

        // create path and map variables
        String localVarPath = "/clients/payment/client_packages/update_usage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsPaymentClientPackagesUpdateUsagePostValidateBeforeCall(String authorization, Body2 body2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling clientsPaymentClientPackagesUpdateUsagePost(Async)");
        }
        

        okhttp3.Call localVarCall = clientsPaymentClientPackagesUpdateUsagePostCall(authorization, body2, _callback);
        return localVarCall;

    }

    /**
     * Use Client Package Credit [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @return ClientsPaymentClientPackagesUpdateUsagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package updated by client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ClientsPaymentClientPackagesUpdateUsagePost200Response clientsPaymentClientPackagesUpdateUsagePost(String authorization, Body2 body2) throws ApiException {
        ApiResponse<ClientsPaymentClientPackagesUpdateUsagePost200Response> localVarResp = clientsPaymentClientPackagesUpdateUsagePostWithHttpInfo(authorization, body2);
        return localVarResp.getData();
    }

    /**
     * Use Client Package Credit [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @return ApiResponse&lt;ClientsPaymentClientPackagesUpdateUsagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package updated by client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientsPaymentClientPackagesUpdateUsagePost200Response> clientsPaymentClientPackagesUpdateUsagePostWithHttpInfo(String authorization, Body2 body2) throws ApiException {
        okhttp3.Call localVarCall = clientsPaymentClientPackagesUpdateUsagePostValidateBeforeCall(authorization, body2, null);
        try {
            Type localVarReturnType = new TypeToken<ClientsPaymentClientPackagesUpdateUsagePost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<ClientsPaymentClientPackagesUpdateUsagePost200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<ClientsPaymentClientPackagesUpdateUsagePost200Response>(){});
            throw e;
        }
    }

    /**
     * Use Client Package Credit [Alpha] (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package updated by client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsPaymentClientPackagesUpdateUsagePostAsync(String authorization, Body2 body2, final ApiCallback<ClientsPaymentClientPackagesUpdateUsagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsPaymentClientPackagesUpdateUsagePostValidateBeforeCall(authorization, body2, _callback);
        Type localVarReturnType = new TypeToken<ClientsPaymentClientPackagesUpdateUsagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsPaymentClientPackagesValidateGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param paymentStatusId Payment status ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validation Occurred </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsPaymentClientPackagesValidateGetCall(String authorization, String paymentStatusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/payment/client_packages/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paymentStatusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payment_status_id", paymentStatusId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsPaymentClientPackagesValidateGetValidateBeforeCall(String authorization, String paymentStatusId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling clientsPaymentClientPackagesValidateGet(Async)");
        }
        
        // verify the required parameter 'paymentStatusId' is set
        if (paymentStatusId == null) {
            throw new ApiException("Missing the required parameter 'paymentStatusId' when calling clientsPaymentClientPackagesValidateGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientsPaymentClientPackagesValidateGetCall(authorization, paymentStatusId, _callback);
        return localVarCall;

    }

    /**
     * Validate Client Package has redemption [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param paymentStatusId Payment status ID (required)
     * @return ClientsPaymentClientPackagesValidateGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validation Occurred </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ClientsPaymentClientPackagesValidateGet200Response clientsPaymentClientPackagesValidateGet(String authorization, String paymentStatusId) throws ApiException {
        ApiResponse<ClientsPaymentClientPackagesValidateGet200Response> localVarResp = clientsPaymentClientPackagesValidateGetWithHttpInfo(authorization, paymentStatusId);
        return localVarResp.getData();
    }

    /**
     * Validate Client Package has redemption [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param paymentStatusId Payment status ID (required)
     * @return ApiResponse&lt;ClientsPaymentClientPackagesValidateGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validation Occurred </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientsPaymentClientPackagesValidateGet200Response> clientsPaymentClientPackagesValidateGetWithHttpInfo(String authorization, String paymentStatusId) throws ApiException {
        okhttp3.Call localVarCall = clientsPaymentClientPackagesValidateGetValidateBeforeCall(authorization, paymentStatusId, null);
        try {
            Type localVarReturnType = new TypeToken<ClientsPaymentClientPackagesValidateGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<ClientsPaymentClientPackagesValidateGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<ClientsPaymentClientPackagesValidateGet200Response>(){});
            throw e;
        }
    }

    /**
     * Validate Client Package has redemption [Alpha] (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param paymentStatusId Payment status ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Validation Occurred </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsPaymentClientPackagesValidateGetAsync(String authorization, String paymentStatusId, final ApiCallback<ClientsPaymentClientPackagesValidateGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsPaymentClientPackagesValidateGetValidateBeforeCall(authorization, paymentStatusId, _callback);
        Type localVarReturnType = new TypeToken<ClientsPaymentClientPackagesValidateGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentClientPackagesPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject19  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package added to the client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentClientPackagesPostCall(String authorization, InlineObject19 inlineObject19, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject19;

        // create path and map variables
        String localVarPath = "/payment/client_packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentClientPackagesPostValidateBeforeCall(String authorization, InlineObject19 inlineObject19, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentClientPackagesPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentClientPackagesPostCall(authorization, inlineObject19, _callback);
        return localVarCall;

    }

    /**
     * Add package to client [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject19  (optional)
     * @return PaymentClientPackagesPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package added to the client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentClientPackagesPost201Response paymentClientPackagesPost(String authorization, InlineObject19 inlineObject19) throws ApiException {
        ApiResponse<PaymentClientPackagesPost201Response> localVarResp = paymentClientPackagesPostWithHttpInfo(authorization, inlineObject19);
        return localVarResp.getData();
    }

    /**
     * Add package to client [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject19  (optional)
     * @return ApiResponse&lt;PaymentClientPackagesPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package added to the client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentClientPackagesPost201Response> paymentClientPackagesPostWithHttpInfo(String authorization, InlineObject19 inlineObject19) throws ApiException {
        okhttp3.Call localVarCall = paymentClientPackagesPostValidateBeforeCall(authorization, inlineObject19, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentClientPackagesPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentClientPackagesPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentClientPackagesPost201Response>(){});
            throw e;
        }
    }

    /**
     * Add package to client [Alpha] (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject19  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package added to the client </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentClientPackagesPostAsync(String authorization, InlineObject19 inlineObject19, final ApiCallback<PaymentClientPackagesPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentClientPackagesPostValidateBeforeCall(authorization, inlineObject19, _callback);
        Type localVarReturnType = new TypeToken<PaymentClientPackagesPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentClientPackagesUpdateUsagePost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client package credit updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentClientPackagesUpdateUsagePostCall(String authorization, Body2 body2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body2;

        // create path and map variables
        String localVarPath = "/payment/client_packages/update_usage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentClientPackagesUpdateUsagePostValidateBeforeCall(String authorization, Body2 body2, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentClientPackagesUpdateUsagePost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentClientPackagesUpdateUsagePostCall(authorization, body2, _callback);
        return localVarCall;

    }

    /**
     * Use Client Package Credit [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @return PaymentClientPackagesUpdateUsagePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client package credit updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentClientPackagesUpdateUsagePost200Response paymentClientPackagesUpdateUsagePost(String authorization, Body2 body2) throws ApiException {
        ApiResponse<PaymentClientPackagesUpdateUsagePost200Response> localVarResp = paymentClientPackagesUpdateUsagePostWithHttpInfo(authorization, body2);
        return localVarResp.getData();
    }

    /**
     * Use Client Package Credit [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @return ApiResponse&lt;PaymentClientPackagesUpdateUsagePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client package credit updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentClientPackagesUpdateUsagePost200Response> paymentClientPackagesUpdateUsagePostWithHttpInfo(String authorization, Body2 body2) throws ApiException {
        okhttp3.Call localVarCall = paymentClientPackagesUpdateUsagePostValidateBeforeCall(authorization, body2, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentClientPackagesUpdateUsagePost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentClientPackagesUpdateUsagePost200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentClientPackagesUpdateUsagePost200Response>(){});
            throw e;
        }
    }

    /**
     * Use Client Package Credit [Alpha] (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param body2  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client package credit updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentClientPackagesUpdateUsagePostAsync(String authorization, Body2 body2, final ApiCallback<PaymentClientPackagesUpdateUsagePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentClientPackagesUpdateUsagePostValidateBeforeCall(authorization, body2, _callback);
        Type localVarReturnType = new TypeToken<PaymentClientPackagesUpdateUsagePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
