/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.InlineObject20;
import com.vcita.platform.client.model.InlineObject21;
import com.vcita.platform.client.model.PaymentPackagesGet200Response;
import com.vcita.platform.client.model.PaymentPackagesGet422Response;
import com.vcita.platform.client.model.PaymentPackagesPackageIdGet200Response;
import com.vcita.platform.client.model.PaymentPackagesPackageIdGet422Response;
import com.vcita.platform.client.model.PaymentPackagesPackageIdPut200Response;
import com.vcita.platform.client.model.PaymentPackagesPackageIdPut422Response;
import com.vcita.platform.client.model.PaymentPackagesPost201Response;
import com.vcita.platform.client.model.PaymentPackagesPost422Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PackagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for paymentPackagesGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param includeItems if exists the packages returns with their items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesGetCall(String authorization, String includeItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_items", includeItems));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentPackagesGetValidateBeforeCall(String authorization, String includeItems, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentPackagesGet(Async)");
        }
        

        okhttp3.Call localVarCall = paymentPackagesGetCall(authorization, includeItems, _callback);
        return localVarCall;

    }

    /**
     * Get all package of business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param includeItems if exists the packages returns with their items (optional)
     * @return PaymentPackagesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentPackagesGet200Response paymentPackagesGet(String authorization, String includeItems) throws ApiException {
        ApiResponse<PaymentPackagesGet200Response> localVarResp = paymentPackagesGetWithHttpInfo(authorization, includeItems);
        return localVarResp.getData();
    }

    /**
     * Get all package of business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param includeItems if exists the packages returns with their items (optional)
     * @return ApiResponse&lt;PaymentPackagesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentPackagesGet200Response> paymentPackagesGetWithHttpInfo(String authorization, String includeItems) throws ApiException {
        okhttp3.Call localVarCall = paymentPackagesGetValidateBeforeCall(authorization, includeItems, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentPackagesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentPackagesGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentPackagesGet200Response>(){});
            throw e;
        }
    }

    /**
     * Get all package of business (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param includeItems if exists the packages returns with their items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Packages Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesGetAsync(String authorization, String includeItems, final ApiCallback<PaymentPackagesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentPackagesGetValidateBeforeCall(authorization, includeItems, _callback);
        Type localVarReturnType = new TypeToken<PaymentPackagesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentPackagesPackageIdGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPackageIdGetCall(String authorization, String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/packages/{package_id}"
            .replaceAll("\\{" + "package_id" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentPackagesPackageIdGetValidateBeforeCall(String authorization, String packageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentPackagesPackageIdGet(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling paymentPackagesPackageIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = paymentPackagesPackageIdGetCall(authorization, packageId, _callback);
        return localVarCall;

    }

    /**
     * Show package info
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @return PaymentPackagesPackageIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentPackagesPackageIdGet200Response paymentPackagesPackageIdGet(String authorization, String packageId) throws ApiException {
        ApiResponse<PaymentPackagesPackageIdGet200Response> localVarResp = paymentPackagesPackageIdGetWithHttpInfo(authorization, packageId);
        return localVarResp.getData();
    }

    /**
     * Show package info
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @return ApiResponse&lt;PaymentPackagesPackageIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentPackagesPackageIdGet200Response> paymentPackagesPackageIdGetWithHttpInfo(String authorization, String packageId) throws ApiException {
        okhttp3.Call localVarCall = paymentPackagesPackageIdGetValidateBeforeCall(authorization, packageId, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentPackagesPackageIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentPackagesPackageIdGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentPackagesPackageIdGet200Response>(){});
            throw e;
        }
    }

    /**
     * Show package info (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Info Retrieved </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPackageIdGetAsync(String authorization, String packageId, final ApiCallback<PaymentPackagesPackageIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentPackagesPackageIdGetValidateBeforeCall(authorization, packageId, _callback);
        Type localVarReturnType = new TypeToken<PaymentPackagesPackageIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentPackagesPackageIdPut
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param inlineObject21  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPackageIdPutCall(String authorization, String packageId, InlineObject21 inlineObject21, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject21;

        // create path and map variables
        String localVarPath = "/payment/packages/{package_id}"
            .replaceAll("\\{" + "package_id" + "\\}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentPackagesPackageIdPutValidateBeforeCall(String authorization, String packageId, InlineObject21 inlineObject21, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentPackagesPackageIdPut(Async)");
        }
        
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling paymentPackagesPackageIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = paymentPackagesPackageIdPutCall(authorization, packageId, inlineObject21, _callback);
        return localVarCall;

    }

    /**
     * Update package [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param inlineObject21  (optional)
     * @return PaymentPackagesPackageIdPut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentPackagesPackageIdPut200Response paymentPackagesPackageIdPut(String authorization, String packageId, InlineObject21 inlineObject21) throws ApiException {
        ApiResponse<PaymentPackagesPackageIdPut200Response> localVarResp = paymentPackagesPackageIdPutWithHttpInfo(authorization, packageId, inlineObject21);
        return localVarResp.getData();
    }

    /**
     * Update package [Alpha]
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param inlineObject21  (optional)
     * @return ApiResponse&lt;PaymentPackagesPackageIdPut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentPackagesPackageIdPut200Response> paymentPackagesPackageIdPutWithHttpInfo(String authorization, String packageId, InlineObject21 inlineObject21) throws ApiException {
        okhttp3.Call localVarCall = paymentPackagesPackageIdPutValidateBeforeCall(authorization, packageId, inlineObject21, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentPackagesPackageIdPut200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentPackagesPackageIdPut200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentPackagesPackageIdPut200Response>(){});
            throw e;
        }
    }

    /**
     * Update package [Alpha] (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param packageId  (required)
     * @param inlineObject21  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Package Updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPackageIdPutAsync(String authorization, String packageId, InlineObject21 inlineObject21, final ApiCallback<PaymentPackagesPackageIdPut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentPackagesPackageIdPutValidateBeforeCall(authorization, packageId, inlineObject21, _callback);
        Type localVarReturnType = new TypeToken<PaymentPackagesPackageIdPut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentPackagesPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject20  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPostCall(String authorization, InlineObject20 inlineObject20, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject20;

        // create path and map variables
        String localVarPath = "/payment/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentPackagesPostValidateBeforeCall(String authorization, InlineObject20 inlineObject20, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentPackagesPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentPackagesPostCall(authorization, inlineObject20, _callback);
        return localVarCall;

    }

    /**
     * Create Package 
     * Create a package and its corresponding items
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject20  (optional)
     * @return PaymentPackagesPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public PaymentPackagesPost201Response paymentPackagesPost(String authorization, InlineObject20 inlineObject20) throws ApiException {
        ApiResponse<PaymentPackagesPost201Response> localVarResp = paymentPackagesPostWithHttpInfo(authorization, inlineObject20);
        return localVarResp.getData();
    }

    /**
     * Create Package 
     * Create a package and its corresponding items
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject20  (optional)
     * @return ApiResponse&lt;PaymentPackagesPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentPackagesPost201Response> paymentPackagesPostWithHttpInfo(String authorization, InlineObject20 inlineObject20) throws ApiException {
        okhttp3.Call localVarCall = paymentPackagesPostValidateBeforeCall(authorization, inlineObject20, null);
        try {
            Type localVarReturnType = new TypeToken<PaymentPackagesPost201Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<PaymentPackagesPost201Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<PaymentPackagesPost201Response>(){});
            throw e;
        }
    }

    /**
     * Create Package  (asynchronously)
     * Create a package and its corresponding items
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject20  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Package Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPackagesPostAsync(String authorization, InlineObject20 inlineObject20, final ApiCallback<PaymentPackagesPost201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentPackagesPostValidateBeforeCall(authorization, inlineObject20, _callback);
        Type localVarReturnType = new TypeToken<PaymentPackagesPost201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
