/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.BusinessesBusinessIdWizardsGet200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdWizardsWizardNameGet200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdWizardsWizardNamePut200Response;
import com.vcita.platform.client.model.InlineObject7;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WizardApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WizardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WizardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for businessesBusinessIdWizardsGet
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsGetCall(String businessId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/wizards"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdWizardsGetValidateBeforeCall(String businessId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdWizardsGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdWizardsGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdWizardsGetCall(businessId, authorization, _callback);
        return localVarCall;

    }

    /**
     * Gets a list of wizards
     * Gets a list of available wizards
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return BusinessesBusinessIdWizardsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdWizardsGet200Response businessesBusinessIdWizardsGet(String businessId, String authorization) throws ApiException {
        ApiResponse<BusinessesBusinessIdWizardsGet200Response> localVarResp = businessesBusinessIdWizardsGetWithHttpInfo(businessId, authorization);
        return localVarResp.getData();
    }

    /**
     * Gets a list of wizards
     * Gets a list of available wizards
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ApiResponse&lt;BusinessesBusinessIdWizardsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdWizardsGet200Response> businessesBusinessIdWizardsGetWithHttpInfo(String businessId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdWizardsGetValidateBeforeCall(businessId, authorization, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdWizardsGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdWizardsGet200Response>(){});
            throw e;
        }
    }

    /**
     * Gets a list of wizards (asynchronously)
     * Gets a list of available wizards
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsGetAsync(String businessId, String authorization, final ApiCallback<BusinessesBusinessIdWizardsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdWizardsGetValidateBeforeCall(businessId, authorization, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdWizardsWizardNameGet
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsWizardNameGetCall(String businessId, String wizardName, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/wizards/{wizard_name}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()))
            .replaceAll("\\{" + "wizard_name" + "\\}", localVarApiClient.escapeString(wizardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdWizardsWizardNameGetValidateBeforeCall(String businessId, String wizardName, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdWizardsWizardNameGet(Async)");
        }
        
        // verify the required parameter 'wizardName' is set
        if (wizardName == null) {
            throw new ApiException("Missing the required parameter 'wizardName' when calling businessesBusinessIdWizardsWizardNameGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdWizardsWizardNameGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNameGetCall(businessId, wizardName, authorization, _callback);
        return localVarCall;

    }

    /**
     * Gets a wizard by name
     * Gets a wizard by given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return BusinessesBusinessIdWizardsWizardNameGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdWizardsWizardNameGet200Response businessesBusinessIdWizardsWizardNameGet(String businessId, String wizardName, String authorization) throws ApiException {
        ApiResponse<BusinessesBusinessIdWizardsWizardNameGet200Response> localVarResp = businessesBusinessIdWizardsWizardNameGetWithHttpInfo(businessId, wizardName, authorization);
        return localVarResp.getData();
    }

    /**
     * Gets a wizard by name
     * Gets a wizard by given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @return ApiResponse&lt;BusinessesBusinessIdWizardsWizardNameGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdWizardsWizardNameGet200Response> businessesBusinessIdWizardsWizardNameGetWithHttpInfo(String businessId, String wizardName, String authorization) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNameGetValidateBeforeCall(businessId, wizardName, authorization, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsWizardNameGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdWizardsWizardNameGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdWizardsWizardNameGet200Response>(){});
            throw e;
        }
    }

    /**
     * Gets a wizard by name (asynchronously)
     * Gets a wizard by given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsWizardNameGetAsync(String businessId, String wizardName, String authorization, final ApiCallback<BusinessesBusinessIdWizardsWizardNameGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNameGetValidateBeforeCall(businessId, wizardName, authorization, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsWizardNameGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdWizardsWizardNamePut
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject7  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsWizardNamePutCall(String businessId, String wizardName, String authorization, InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject7;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/wizards/{wizard_name}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()))
            .replaceAll("\\{" + "wizard_name" + "\\}", localVarApiClient.escapeString(wizardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdWizardsWizardNamePutValidateBeforeCall(String businessId, String wizardName, String authorization, InlineObject7 inlineObject7, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdWizardsWizardNamePut(Async)");
        }
        
        // verify the required parameter 'wizardName' is set
        if (wizardName == null) {
            throw new ApiException("Missing the required parameter 'wizardName' when calling businessesBusinessIdWizardsWizardNamePut(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdWizardsWizardNamePut(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNamePutCall(businessId, wizardName, authorization, inlineObject7, _callback);
        return localVarCall;

    }

    /**
     * Update a wizard
     * Update a wizard with given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject7  (optional)
     * @return BusinessesBusinessIdWizardsWizardNamePut200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdWizardsWizardNamePut200Response businessesBusinessIdWizardsWizardNamePut(String businessId, String wizardName, String authorization, InlineObject7 inlineObject7) throws ApiException {
        ApiResponse<BusinessesBusinessIdWizardsWizardNamePut200Response> localVarResp = businessesBusinessIdWizardsWizardNamePutWithHttpInfo(businessId, wizardName, authorization, inlineObject7);
        return localVarResp.getData();
    }

    /**
     * Update a wizard
     * Update a wizard with given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject7  (optional)
     * @return ApiResponse&lt;BusinessesBusinessIdWizardsWizardNamePut200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdWizardsWizardNamePut200Response> businessesBusinessIdWizardsWizardNamePutWithHttpInfo(String businessId, String wizardName, String authorization, InlineObject7 inlineObject7) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNamePutValidateBeforeCall(businessId, wizardName, authorization, inlineObject7, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsWizardNamePut200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdWizardsWizardNamePut200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdWizardsWizardNamePut200Response>(){});
            throw e;
        }
    }

    /**
     * Update a wizard (asynchronously)
     * Update a wizard with given name
     * @param businessId Business ID (required)
     * @param wizardName Wizard&#39;s name (e.g. register_wizard) (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject7  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdWizardsWizardNamePutAsync(String businessId, String wizardName, String authorization, InlineObject7 inlineObject7, final ApiCallback<BusinessesBusinessIdWizardsWizardNamePut200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdWizardsWizardNamePutValidateBeforeCall(businessId, wizardName, authorization, inlineObject7, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdWizardsWizardNamePut200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
