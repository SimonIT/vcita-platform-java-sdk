/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.BusinessesBusinessIdFeaturesGet200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdGet200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdPost200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdPost400Response;
import com.vcita.platform.client.model.BusinessesGet200Response;
import com.vcita.platform.client.model.BusinessesPost200Response;
import com.vcita.platform.client.model.BusinessesValidateLoginGet200Response;
import com.vcita.platform.client.model.GlobalBusinessesGet200Response;
import com.vcita.platform.client.model.InlineObject4;
import com.vcita.platform.client.model.InlineObject5;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BusinessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for businessesBusinessIdFeaturesGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Features Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdFeaturesGetCall(String authorization, String businessId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/features"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdFeaturesGetValidateBeforeCall(String authorization, String businessId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdFeaturesGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdFeaturesGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdFeaturesGetCall(authorization, businessId, _callback);
        return localVarCall;

    }

    /**
     * Get Business Features
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @return BusinessesBusinessIdFeaturesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Features Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdFeaturesGet200Response businessesBusinessIdFeaturesGet(String authorization, String businessId) throws ApiException {
        ApiResponse<BusinessesBusinessIdFeaturesGet200Response> localVarResp = businessesBusinessIdFeaturesGetWithHttpInfo(authorization, businessId);
        return localVarResp.getData();
    }

    /**
     * Get Business Features
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @return ApiResponse&lt;BusinessesBusinessIdFeaturesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Features Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdFeaturesGet200Response> businessesBusinessIdFeaturesGetWithHttpInfo(String authorization, String businessId) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdFeaturesGetValidateBeforeCall(authorization, businessId, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdFeaturesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdFeaturesGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdFeaturesGet200Response>(){});
            throw e;
        }
    }

    /**
     * Get Business Features (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Features Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdFeaturesGetAsync(String authorization, String businessId, final ApiCallback<BusinessesBusinessIdFeaturesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdFeaturesGetValidateBeforeCall(authorization, businessId, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdFeaturesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdGetCall(String authorization, String businessId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdGetValidateBeforeCall(String authorization, String businessId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdGetCall(authorization, businessId, _callback);
        return localVarCall;

    }

    /**
     * Get Business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @return BusinessesBusinessIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdGet200Response businessesBusinessIdGet(String authorization, String businessId) throws ApiException {
        ApiResponse<BusinessesBusinessIdGet200Response> localVarResp = businessesBusinessIdGetWithHttpInfo(authorization, businessId);
        return localVarResp.getData();
    }

    /**
     * Get Business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @return ApiResponse&lt;BusinessesBusinessIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdGet200Response> businessesBusinessIdGetWithHttpInfo(String authorization, String businessId) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdGetValidateBeforeCall(authorization, businessId, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdGet200Response>(){});
            throw e;
        }
    }

    /**
     * Get Business (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdGetAsync(String authorization, String businessId, final ApiCallback<BusinessesBusinessIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdGetValidateBeforeCall(authorization, businessId, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param inlineObject5  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Business Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdPostCall(String authorization, String businessId, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject5;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdPostValidateBeforeCall(String authorization, String businessId, InlineObject5 inlineObject5, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdPost(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdPostCall(authorization, businessId, inlineObject5, _callback);
        return localVarCall;

    }

    /**
     * Update Business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param inlineObject5  (optional)
     * @return BusinessesBusinessIdPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Business Updated </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdPost200Response businessesBusinessIdPost(String authorization, String businessId, InlineObject5 inlineObject5) throws ApiException {
        ApiResponse<BusinessesBusinessIdPost200Response> localVarResp = businessesBusinessIdPostWithHttpInfo(authorization, businessId, inlineObject5);
        return localVarResp.getData();
    }

    /**
     * Update Business
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param inlineObject5  (optional)
     * @return ApiResponse&lt;BusinessesBusinessIdPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Business Updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdPost200Response> businessesBusinessIdPostWithHttpInfo(String authorization, String businessId, InlineObject5 inlineObject5) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdPostValidateBeforeCall(authorization, businessId, inlineObject5, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdPost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesBusinessIdPost200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesBusinessIdPost200Response>(){});
            throw e;
        }
    }

    /**
     * Update Business (asynchronously)
     * 
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param inlineObject5  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Business Updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdPostAsync(String authorization, String businessId, InlineObject5 inlineObject5, final ApiCallback<BusinessesBusinessIdPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdPostValidateBeforeCall(authorization, businessId, inlineObject5, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param email Filter by email specified (optional)
     * @param externalId Filter by \&quot;external_id\&quot; specified (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business ID Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesGetCall(String authorization, String email, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesGetValidateBeforeCall(String authorization, String email, String externalId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesGetCall(authorization, email, externalId, _callback);
        return localVarCall;

    }

    /**
     * Get Business filtered by email or external_id
     * Retrieves a business by email or external_id. One of email or external ID is required.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param email Filter by email specified (optional)
     * @param externalId Filter by \&quot;external_id\&quot; specified (optional)
     * @return BusinessesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business ID Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesGet200Response businessesGet(String authorization, String email, String externalId) throws ApiException {
        ApiResponse<BusinessesGet200Response> localVarResp = businessesGetWithHttpInfo(authorization, email, externalId);
        return localVarResp.getData();
    }

    /**
     * Get Business filtered by email or external_id
     * Retrieves a business by email or external_id. One of email or external ID is required.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param email Filter by email specified (optional)
     * @param externalId Filter by \&quot;external_id\&quot; specified (optional)
     * @return ApiResponse&lt;BusinessesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business ID Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesGet200Response> businessesGetWithHttpInfo(String authorization, String email, String externalId) throws ApiException {
        okhttp3.Call localVarCall = businessesGetValidateBeforeCall(authorization, email, externalId, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesGet200Response>(){});
            throw e;
        }
    }

    /**
     * Get Business filtered by email or external_id (asynchronously)
     * Retrieves a business by email or external_id. One of email or external ID is required.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param email Filter by email specified (optional)
     * @param externalId Filter by \&quot;external_id\&quot; specified (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business ID Retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesGetAsync(String authorization, String email, String externalId, final ApiCallback<BusinessesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesGetValidateBeforeCall(authorization, email, externalId, _callback);
        Type localVarReturnType = new TypeToken<BusinessesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesPost
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject4  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesPostCall(String authorization, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/businesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesPostValidateBeforeCall(String authorization, InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesPost(Async)");
        }
        

        okhttp3.Call localVarCall = businessesPostCall(authorization, inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * Create a Business
     * Creates a Business.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject4  (optional)
     * @return BusinessesPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Created </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesPost200Response businessesPost(String authorization, InlineObject4 inlineObject4) throws ApiException {
        ApiResponse<BusinessesPost200Response> localVarResp = businessesPostWithHttpInfo(authorization, inlineObject4);
        return localVarResp.getData();
    }

    /**
     * Create a Business
     * Creates a Business.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject4  (optional)
     * @return ApiResponse&lt;BusinessesPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesPost200Response> businessesPostWithHttpInfo(String authorization, InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = businessesPostValidateBeforeCall(authorization, inlineObject4, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesPost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesPost200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesPost200Response>(){});
            throw e;
        }
    }

    /**
     * Create a Business (asynchronously)
     * Creates a Business.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject4  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Business Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesPostAsync(String authorization, InlineObject4 inlineObject4, final ApiCallback<BusinessesPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesPostValidateBeforeCall(authorization, inlineObject4, _callback);
        Type localVarReturnType = new TypeToken<BusinessesPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesValidateLoginGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param username Email (required)
     * @param password Password (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login Validated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesValidateLoginGetCall(String authorization, String username, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/validate_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesValidateLoginGetValidateBeforeCall(String authorization, String username, String password, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesValidateLoginGet(Async)");
        }
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling businessesValidateLoginGet(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling businessesValidateLoginGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesValidateLoginGetCall(authorization, username, password, _callback);
        return localVarCall;

    }

    /**
     * Validate Login
     * Validates username/password credentials for login. The API will be blocked for the username after 5 failed attempts.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param username Email (required)
     * @param password Password (required)
     * @return BusinessesValidateLoginGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login Validated </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesValidateLoginGet200Response businessesValidateLoginGet(String authorization, String username, String password) throws ApiException {
        ApiResponse<BusinessesValidateLoginGet200Response> localVarResp = businessesValidateLoginGetWithHttpInfo(authorization, username, password);
        return localVarResp.getData();
    }

    /**
     * Validate Login
     * Validates username/password credentials for login. The API will be blocked for the username after 5 failed attempts.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param username Email (required)
     * @param password Password (required)
     * @return ApiResponse&lt;BusinessesValidateLoginGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login Validated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesValidateLoginGet200Response> businessesValidateLoginGetWithHttpInfo(String authorization, String username, String password) throws ApiException {
        okhttp3.Call localVarCall = businessesValidateLoginGetValidateBeforeCall(authorization, username, password, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesValidateLoginGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<BusinessesValidateLoginGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<BusinessesValidateLoginGet200Response>(){});
            throw e;
        }
    }

    /**
     * Validate Login (asynchronously)
     * Validates username/password credentials for login. The API will be blocked for the username after 5 failed attempts.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param username Email (required)
     * @param password Password (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login Validated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesValidateLoginGetAsync(String authorization, String username, String password, final ApiCallback<BusinessesValidateLoginGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesValidateLoginGetValidateBeforeCall(authorization, username, password, _callback);
        Type localVarReturnType = new TypeToken<BusinessesValidateLoginGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalBusinessesGet
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalBusinessesGetCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/global/businesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalBusinessesGetValidateBeforeCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling globalBusinessesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling globalBusinessesGet(Async)");
        }
        

        okhttp3.Call localVarCall = globalBusinessesGetCall(date, authorization, page, _callback);
        return localVarCall;

    }

    /**
     * Gets a list of businesses
     * Gets a list of businesses
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return GlobalBusinessesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GlobalBusinessesGet200Response globalBusinessesGet(String date, String authorization, Integer page) throws ApiException {
        ApiResponse<GlobalBusinessesGet200Response> localVarResp = globalBusinessesGetWithHttpInfo(date, authorization, page);
        return localVarResp.getData();
    }

    /**
     * Gets a list of businesses
     * Gets a list of businesses
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return ApiResponse&lt;GlobalBusinessesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalBusinessesGet200Response> globalBusinessesGetWithHttpInfo(String date, String authorization, Integer page) throws ApiException {
        okhttp3.Call localVarCall = globalBusinessesGetValidateBeforeCall(date, authorization, page, null);
        try {
            Type localVarReturnType = new TypeToken<GlobalBusinessesGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<GlobalBusinessesGet200Response>(){}.getType()));
            e.setErrorObjectType(new GenericType<GlobalBusinessesGet200Response>(){});
            throw e;
        }
    }

    /**
     * Gets a list of businesses (asynchronously)
     * Gets a list of businesses
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalBusinessesGetAsync(String date, String authorization, Integer page, final ApiCallback<GlobalBusinessesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalBusinessesGetValidateBeforeCall(date, authorization, page, _callback);
        Type localVarReturnType = new TypeToken<GlobalBusinessesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
