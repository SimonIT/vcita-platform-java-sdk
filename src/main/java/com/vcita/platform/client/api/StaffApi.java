/*
 * Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.vcita.platform.client.api;

import com.vcita.platform.client.ApiCallback;
import com.vcita.platform.client.ApiClient;
import com.vcita.platform.client.ApiException;
import com.vcita.platform.client.ApiResponse;
import com.vcita.platform.client.Configuration;
import com.vcita.platform.client.Pair;
import com.vcita.platform.client.ProgressRequestBody;
import com.vcita.platform.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.vcita.platform.client.model.BusinessesBusinessIdStaffsGet200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdStaffsPost200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdStaffsStaffIdDelete200Response;
import com.vcita.platform.client.model.BusinessesBusinessIdStaffsStaffIdGet200Response;
import com.vcita.platform.client.model.GlobalStaffsGet200Response;
import com.vcita.platform.client.model.InlineObject6;
import com.vcita.platform.client.model.SchedulingStaffGet200Response;
import com.vcita.platform.client.model.SchedulingStaffStaffIdGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StaffApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StaffApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StaffApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for businessesBusinessIdStaffsGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param status Optional fetch status active/all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsGetCall(String authorization, String businessId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/staffs"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdStaffsGetValidateBeforeCall(String authorization, String businessId, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdStaffsGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdStaffsGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdStaffsGetCall(authorization, businessId, status, _callback);
        return localVarCall;

    }

    /**
     * Get Staff Members
     * Get Staff List and Details (ordered by position field).
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param status Optional fetch status active/all (optional)
     * @return BusinessesBusinessIdStaffsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdStaffsGet200Response businessesBusinessIdStaffsGet(String authorization, String businessId, String status) throws ApiException {
        ApiResponse<BusinessesBusinessIdStaffsGet200Response> localVarResp = businessesBusinessIdStaffsGetWithHttpInfo(authorization, businessId, status);
        return localVarResp.getData();
    }

    /**
     * Get Staff Members
     * Get Staff List and Details (ordered by position field).
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param status Optional fetch status active/all (optional)
     * @return ApiResponse&lt;BusinessesBusinessIdStaffsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdStaffsGet200Response> businessesBusinessIdStaffsGetWithHttpInfo(String authorization, String businessId, String status) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdStaffsGetValidateBeforeCall(authorization, businessId, status, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Staff Members (asynchronously)
     * Get Staff List and Details (ordered by position field).
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param status Optional fetch status active/all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsGetAsync(String authorization, String businessId, String status, final ApiCallback<BusinessesBusinessIdStaffsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdStaffsGetValidateBeforeCall(authorization, businessId, status, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdStaffsPost
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject6  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsPostCall(String businessId, String authorization, InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObject6;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/staffs"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdStaffsPostValidateBeforeCall(String businessId, String authorization, InlineObject6 inlineObject6, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdStaffsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdStaffsPost(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdStaffsPostCall(businessId, authorization, inlineObject6, _callback);
        return localVarCall;

    }

    /**
     * Create Staff Member
     * Creates a Staff.
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject6  (optional)
     * @return BusinessesBusinessIdStaffsPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdStaffsPost200Response businessesBusinessIdStaffsPost(String businessId, String authorization, InlineObject6 inlineObject6) throws ApiException {
        ApiResponse<BusinessesBusinessIdStaffsPost200Response> localVarResp = businessesBusinessIdStaffsPostWithHttpInfo(businessId, authorization, inlineObject6);
        return localVarResp.getData();
    }

    /**
     * Create Staff Member
     * Creates a Staff.
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject6  (optional)
     * @return ApiResponse&lt;BusinessesBusinessIdStaffsPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdStaffsPost200Response> businessesBusinessIdStaffsPostWithHttpInfo(String businessId, String authorization, InlineObject6 inlineObject6) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdStaffsPostValidateBeforeCall(businessId, authorization, inlineObject6, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsPost200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Create Staff Member (asynchronously)
     * Creates a Staff.
     * @param businessId Business ID (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param inlineObject6  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsPostAsync(String businessId, String authorization, InlineObject6 inlineObject6, final ApiCallback<BusinessesBusinessIdStaffsPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdStaffsPostValidateBeforeCall(businessId, authorization, inlineObject6, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdStaffsStaffIdDelete
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsStaffIdDeleteCall(String authorization, String businessId, String staffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/staffs/{staff_id}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()))
            .replaceAll("\\{" + "staff_id" + "\\}", localVarApiClient.escapeString(staffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdStaffsStaffIdDeleteValidateBeforeCall(String authorization, String businessId, String staffId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdStaffsStaffIdDelete(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdStaffsStaffIdDelete(Async)");
        }
        
        // verify the required parameter 'staffId' is set
        if (staffId == null) {
            throw new ApiException("Missing the required parameter 'staffId' when calling businessesBusinessIdStaffsStaffIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdDeleteCall(authorization, businessId, staffId, _callback);
        return localVarCall;

    }

    /**
     * Delete Staff Member
     * Delete Staff Member.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @return BusinessesBusinessIdStaffsStaffIdDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdStaffsStaffIdDelete200Response businessesBusinessIdStaffsStaffIdDelete(String authorization, String businessId, String staffId) throws ApiException {
        ApiResponse<BusinessesBusinessIdStaffsStaffIdDelete200Response> localVarResp = businessesBusinessIdStaffsStaffIdDeleteWithHttpInfo(authorization, businessId, staffId);
        return localVarResp.getData();
    }

    /**
     * Delete Staff Member
     * Delete Staff Member.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @return ApiResponse&lt;BusinessesBusinessIdStaffsStaffIdDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdStaffsStaffIdDelete200Response> businessesBusinessIdStaffsStaffIdDeleteWithHttpInfo(String authorization, String businessId, String staffId) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdDeleteValidateBeforeCall(authorization, businessId, staffId, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsStaffIdDelete200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Delete Staff Member (asynchronously)
     * Delete Staff Member.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsStaffIdDeleteAsync(String authorization, String businessId, String staffId, final ApiCallback<BusinessesBusinessIdStaffsStaffIdDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdDeleteValidateBeforeCall(authorization, businessId, staffId, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsStaffIdDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessesBusinessIdStaffsStaffIdGet
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsStaffIdGetCall(String authorization, String businessId, String staffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/businesses/{business_id}/staffs/{staff_id}"
            .replaceAll("\\{" + "business_id" + "\\}", localVarApiClient.escapeString(businessId.toString()))
            .replaceAll("\\{" + "staff_id" + "\\}", localVarApiClient.escapeString(staffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessesBusinessIdStaffsStaffIdGetValidateBeforeCall(String authorization, String businessId, String staffId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling businessesBusinessIdStaffsStaffIdGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling businessesBusinessIdStaffsStaffIdGet(Async)");
        }
        
        // verify the required parameter 'staffId' is set
        if (staffId == null) {
            throw new ApiException("Missing the required parameter 'staffId' when calling businessesBusinessIdStaffsStaffIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdGetCall(authorization, businessId, staffId, _callback);
        return localVarCall;

    }

    /**
     * Get Staff Member Details
     * Get Staff Details.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @return BusinessesBusinessIdStaffsStaffIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BusinessesBusinessIdStaffsStaffIdGet200Response businessesBusinessIdStaffsStaffIdGet(String authorization, String businessId, String staffId) throws ApiException {
        ApiResponse<BusinessesBusinessIdStaffsStaffIdGet200Response> localVarResp = businessesBusinessIdStaffsStaffIdGetWithHttpInfo(authorization, businessId, staffId);
        return localVarResp.getData();
    }

    /**
     * Get Staff Member Details
     * Get Staff Details.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @return ApiResponse&lt;BusinessesBusinessIdStaffsStaffIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessesBusinessIdStaffsStaffIdGet200Response> businessesBusinessIdStaffsStaffIdGetWithHttpInfo(String authorization, String businessId, String staffId) throws ApiException {
        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdGetValidateBeforeCall(authorization, businessId, staffId, null);
        try {
            Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsStaffIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Staff Member Details (asynchronously)
     * Get Staff Details.
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param businessId Business ID (required)
     * @param staffId Staff ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessesBusinessIdStaffsStaffIdGetAsync(String authorization, String businessId, String staffId, final ApiCallback<BusinessesBusinessIdStaffsStaffIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessesBusinessIdStaffsStaffIdGetValidateBeforeCall(authorization, businessId, staffId, _callback);
        Type localVarReturnType = new TypeToken<BusinessesBusinessIdStaffsStaffIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalStaffsGet
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalStaffsGetCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/global/staffs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalStaffsGetValidateBeforeCall(String date, String authorization, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling globalStaffsGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling globalStaffsGet(Async)");
        }
        

        okhttp3.Call localVarCall = globalStaffsGetCall(date, authorization, page, _callback);
        return localVarCall;

    }

    /**
     * Gets a list of staffs
     * Gets a list of staffs
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return GlobalStaffsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GlobalStaffsGet200Response globalStaffsGet(String date, String authorization, Integer page) throws ApiException {
        ApiResponse<GlobalStaffsGet200Response> localVarResp = globalStaffsGetWithHttpInfo(date, authorization, page);
        return localVarResp.getData();
    }

    /**
     * Gets a list of staffs
     * Gets a list of staffs
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @return ApiResponse&lt;GlobalStaffsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalStaffsGet200Response> globalStaffsGetWithHttpInfo(String date, String authorization, Integer page) throws ApiException {
        okhttp3.Call localVarCall = globalStaffsGetValidateBeforeCall(date, authorization, page, null);
        try {
            Type localVarReturnType = new TypeToken<GlobalStaffsGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Gets a list of staffs (asynchronously)
     * Gets a list of staffs
     * @param date Date timestamp to start iteration. Default interval: 1 hour (required)
     * @param authorization API Token. The resulting header should look like this: &#39;Authorization: \&quot;Bearer API_TOKEN\&quot;&#39; (required)
     * @param page Page number of results. Default: 1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalStaffsGetAsync(String date, String authorization, Integer page, final ApiCallback<GlobalStaffsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalStaffsGetValidateBeforeCall(date, authorization, page, _callback);
        Type localVarReturnType = new TypeToken<GlobalStaffsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingStaffGet
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param serviceId Filter by service id (optional)
     * @param categoryId Filter by category id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingStaffGetCall(String businessId, String onlyActiveServices, String serviceId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduling/staff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (businessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("business_id", businessId));
        }

        if (onlyActiveServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_active_services", onlyActiveServices));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id", serviceId));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingStaffGetValidateBeforeCall(String businessId, String onlyActiveServices, String serviceId, String categoryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling schedulingStaffGet(Async)");
        }
        
        // verify the required parameter 'onlyActiveServices' is set
        if (onlyActiveServices == null) {
            throw new ApiException("Missing the required parameter 'onlyActiveServices' when calling schedulingStaffGet(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingStaffGetCall(businessId, onlyActiveServices, serviceId, categoryId, _callback);
        return localVarCall;

    }

    /**
     * Get Staff List [Alpha]
     * 
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param serviceId Filter by service id (optional)
     * @param categoryId Filter by category id (optional)
     * @return SchedulingStaffGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingStaffGet200Response schedulingStaffGet(String businessId, String onlyActiveServices, String serviceId, String categoryId) throws ApiException {
        ApiResponse<SchedulingStaffGet200Response> localVarResp = schedulingStaffGetWithHttpInfo(businessId, onlyActiveServices, serviceId, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get Staff List [Alpha]
     * 
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param serviceId Filter by service id (optional)
     * @param categoryId Filter by category id (optional)
     * @return ApiResponse&lt;SchedulingStaffGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingStaffGet200Response> schedulingStaffGetWithHttpInfo(String businessId, String onlyActiveServices, String serviceId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = schedulingStaffGetValidateBeforeCall(businessId, onlyActiveServices, serviceId, categoryId, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingStaffGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Staff List [Alpha] (asynchronously)
     * 
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param serviceId Filter by service id (optional)
     * @param categoryId Filter by category id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingStaffGetAsync(String businessId, String onlyActiveServices, String serviceId, String categoryId, final ApiCallback<SchedulingStaffGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingStaffGetValidateBeforeCall(businessId, onlyActiveServices, serviceId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<SchedulingStaffGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulingStaffStaffIdGet
     * @param staffId Staff ID (required)
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingStaffStaffIdGetCall(String staffId, String businessId, String onlyActiveServices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduling/staff/{staff_id}"
            .replaceAll("\\{" + "staff_id" + "\\}", localVarApiClient.escapeString(staffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (businessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("business_id", businessId));
        }

        if (onlyActiveServices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_active_services", onlyActiveServices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulingStaffStaffIdGetValidateBeforeCall(String staffId, String businessId, String onlyActiveServices, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'staffId' is set
        if (staffId == null) {
            throw new ApiException("Missing the required parameter 'staffId' when calling schedulingStaffStaffIdGet(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling schedulingStaffStaffIdGet(Async)");
        }
        
        // verify the required parameter 'onlyActiveServices' is set
        if (onlyActiveServices == null) {
            throw new ApiException("Missing the required parameter 'onlyActiveServices' when calling schedulingStaffStaffIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = schedulingStaffStaffIdGetCall(staffId, businessId, onlyActiveServices, _callback);
        return localVarCall;

    }

    /**
     * Get Staff By ID [Alpha]
     * 
     * @param staffId Staff ID (required)
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @return SchedulingStaffStaffIdGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public SchedulingStaffStaffIdGet200Response schedulingStaffStaffIdGet(String staffId, String businessId, String onlyActiveServices) throws ApiException {
        ApiResponse<SchedulingStaffStaffIdGet200Response> localVarResp = schedulingStaffStaffIdGetWithHttpInfo(staffId, businessId, onlyActiveServices);
        return localVarResp.getData();
    }

    /**
     * Get Staff By ID [Alpha]
     * 
     * @param staffId Staff ID (required)
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @return ApiResponse&lt;SchedulingStaffStaffIdGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulingStaffStaffIdGet200Response> schedulingStaffStaffIdGetWithHttpInfo(String staffId, String businessId, String onlyActiveServices) throws ApiException {
        okhttp3.Call localVarCall = schedulingStaffStaffIdGetValidateBeforeCall(staffId, businessId, onlyActiveServices, null);
        try {
            Type localVarReturnType = new TypeToken<SchedulingStaffStaffIdGet200Response>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            e.setErrorObject(localVarApiClient.getJSON().getGson().fromJson(e.getResponseBody(), new TypeToken<Map<String, Object>>(){}.getType()));
            e.setErrorObjectType(new GenericType<Map<String, Object>>(){});
            throw e;
        }
    }

    /**
     * Get Staff By ID [Alpha] (asynchronously)
     * 
     * @param staffId Staff ID (required)
     * @param businessId Business ID (required)
     * @param onlyActiveServices Filter only active services or all (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Staff Returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulingStaffStaffIdGetAsync(String staffId, String businessId, String onlyActiveServices, final ApiCallback<SchedulingStaffStaffIdGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulingStaffStaffIdGetValidateBeforeCall(staffId, businessId, onlyActiveServices, _callback);
        Type localVarReturnType = new TypeToken<SchedulingStaffStaffIdGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
